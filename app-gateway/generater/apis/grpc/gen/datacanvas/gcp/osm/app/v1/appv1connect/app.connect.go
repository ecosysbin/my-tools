// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: datacanvas/gcp/osm/app/v1/app.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "gitlab.datacanvas.com/aidc/app-gateway/generater/apis/grpc/gen/datacanvas/gcp/osm/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppServiceName is the fully-qualified name of the AppService service.
	AppServiceName = "datacanvas.gcp.osm.app.v1.AppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppServiceCheckHealthProcedure is the fully-qualified name of the AppService's CheckHealth RPC.
	AppServiceCheckHealthProcedure = "/datacanvas.gcp.osm.app.v1.AppService/CheckHealth"
	// AppServiceSetLogLevelProcedure is the fully-qualified name of the AppService's SetLogLevel RPC.
	AppServiceSetLogLevelProcedure = "/datacanvas.gcp.osm.app.v1.AppService/SetLogLevel"
	// AppServiceListAppProcedure is the fully-qualified name of the AppService's ListApp RPC.
	AppServiceListAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/ListApp"
	// AppServiceDeleteAppProcedure is the fully-qualified name of the AppService's DeleteApp RPC.
	AppServiceDeleteAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/DeleteApp"
	// AppServiceGetAppProcedure is the fully-qualified name of the AppService's GetApp RPC.
	AppServiceGetAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/GetApp"
	// AppServiceCreateAppProcedure is the fully-qualified name of the AppService's CreateApp RPC.
	AppServiceCreateAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/CreateApp"
	// AppServiceUpdateAppProcedure is the fully-qualified name of the AppService's UpdateApp RPC.
	AppServiceUpdateAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/UpdateApp"
	// AppServicePauseAppProcedure is the fully-qualified name of the AppService's PauseApp RPC.
	AppServicePauseAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/PauseApp"
	// AppServiceResumeAppProcedure is the fully-qualified name of the AppService's ResumeApp RPC.
	AppServiceResumeAppProcedure = "/datacanvas.gcp.osm.app.v1.AppService/ResumeApp"
	// AppServiceVersionInformationProcedure is the fully-qualified name of the AppService's
	// VersionInformation RPC.
	AppServiceVersionInformationProcedure = "/datacanvas.gcp.osm.app.v1.AppService/VersionInformation"
	// AppServiceListConfigProcedure is the fully-qualified name of the AppService's ListConfig RPC.
	AppServiceListConfigProcedure = "/datacanvas.gcp.osm.app.v1.AppService/ListConfig"
	// AppServiceAddConfigProcedure is the fully-qualified name of the AppService's AddConfig RPC.
	AppServiceAddConfigProcedure = "/datacanvas.gcp.osm.app.v1.AppService/AddConfig"
	// AppServiceDeleteConfigProcedure is the fully-qualified name of the AppService's DeleteConfig RPC.
	AppServiceDeleteConfigProcedure = "/datacanvas.gcp.osm.app.v1.AppService/DeleteConfig"
	// AppServiceUpdateInstanceStatusProcedure is the fully-qualified name of the AppService's
	// UpdateInstanceStatus RPC.
	AppServiceUpdateInstanceStatusProcedure = "/datacanvas.gcp.osm.app.v1.AppService/UpdateInstanceStatus"
	// AppServiceGetVClusterTokenProcedure is the fully-qualified name of the AppService's
	// GetVClusterToken RPC.
	AppServiceGetVClusterTokenProcedure = "/datacanvas.gcp.osm.app.v1.AppService/GetVClusterToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	appServiceServiceDescriptor                    = v1.File_datacanvas_gcp_osm_app_v1_app_proto.Services().ByName("AppService")
	appServiceCheckHealthMethodDescriptor          = appServiceServiceDescriptor.Methods().ByName("CheckHealth")
	appServiceSetLogLevelMethodDescriptor          = appServiceServiceDescriptor.Methods().ByName("SetLogLevel")
	appServiceListAppMethodDescriptor              = appServiceServiceDescriptor.Methods().ByName("ListApp")
	appServiceDeleteAppMethodDescriptor            = appServiceServiceDescriptor.Methods().ByName("DeleteApp")
	appServiceGetAppMethodDescriptor               = appServiceServiceDescriptor.Methods().ByName("GetApp")
	appServiceCreateAppMethodDescriptor            = appServiceServiceDescriptor.Methods().ByName("CreateApp")
	appServiceUpdateAppMethodDescriptor            = appServiceServiceDescriptor.Methods().ByName("UpdateApp")
	appServicePauseAppMethodDescriptor             = appServiceServiceDescriptor.Methods().ByName("PauseApp")
	appServiceResumeAppMethodDescriptor            = appServiceServiceDescriptor.Methods().ByName("ResumeApp")
	appServiceVersionInformationMethodDescriptor   = appServiceServiceDescriptor.Methods().ByName("VersionInformation")
	appServiceListConfigMethodDescriptor           = appServiceServiceDescriptor.Methods().ByName("ListConfig")
	appServiceAddConfigMethodDescriptor            = appServiceServiceDescriptor.Methods().ByName("AddConfig")
	appServiceDeleteConfigMethodDescriptor         = appServiceServiceDescriptor.Methods().ByName("DeleteConfig")
	appServiceUpdateInstanceStatusMethodDescriptor = appServiceServiceDescriptor.Methods().ByName("UpdateInstanceStatus")
	appServiceGetVClusterTokenMethodDescriptor     = appServiceServiceDescriptor.Methods().ByName("GetVClusterToken")
)

// AppServiceClient is a client for the datacanvas.gcp.osm.app.v1.AppService service.
type AppServiceClient interface {
	// 查看gateway是否健康
	CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error)
	SetLogLevel(context.Context, *connect.Request[v1.SetLoglevelRequest]) (*connect.Response[v1.SetLoglevelResponse], error)
	ListApp(context.Context, *connect.Request[v1.ListAppRequest]) (*connect.Response[v1.ListAppResponse], error)
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	GetApp(context.Context, *connect.Request[v1.GetAppRequest]) (*connect.Response[v1.GetAppResponse], error)
	CreateApp(context.Context, *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error)
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	PauseApp(context.Context, *connect.Request[v1.PauseAppRequest]) (*connect.Response[v1.PauseAppResponse], error)
	ResumeApp(context.Context, *connect.Request[v1.ResumeAppRequest]) (*connect.Response[v1.ResumeAppResponse], error)
	VersionInformation(context.Context, *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error)
	ListConfig(context.Context, *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.ListConfigResponse], error)
	AddConfig(context.Context, *connect.Request[v1.AddConfigRequest]) (*connect.Response[v1.AddConfigResponse], error)
	DeleteConfig(context.Context, *connect.Request[v1.DeleteConfigRequest]) (*connect.Response[v1.DeleteConfigResponse], error)
	UpdateInstanceStatus(context.Context, *connect.Request[v1.UpdateInstanceStatusRequest]) (*connect.Response[v1.UpdateInstanceStatusResponse], error)
	GetVClusterToken(context.Context, *connect.Request[v1.GetVClusterTokenRequest]) (*connect.Response[v1.GetVClusterTokenResponse], error)
}

// NewAppServiceClient constructs a client for the datacanvas.gcp.osm.app.v1.AppService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appServiceClient{
		checkHealth: connect.NewClient[v1.CheckHealthRequest, v1.CheckHealthResponse](
			httpClient,
			baseURL+AppServiceCheckHealthProcedure,
			connect.WithSchema(appServiceCheckHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setLogLevel: connect.NewClient[v1.SetLoglevelRequest, v1.SetLoglevelResponse](
			httpClient,
			baseURL+AppServiceSetLogLevelProcedure,
			connect.WithSchema(appServiceSetLogLevelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listApp: connect.NewClient[v1.ListAppRequest, v1.ListAppResponse](
			httpClient,
			baseURL+AppServiceListAppProcedure,
			connect.WithSchema(appServiceListAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApp: connect.NewClient[v1.DeleteAppRequest, v1.DeleteAppResponse](
			httpClient,
			baseURL+AppServiceDeleteAppProcedure,
			connect.WithSchema(appServiceDeleteAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getApp: connect.NewClient[v1.GetAppRequest, v1.GetAppResponse](
			httpClient,
			baseURL+AppServiceGetAppProcedure,
			connect.WithSchema(appServiceGetAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createApp: connect.NewClient[v1.CreateAppRequest, v1.CreateAppResponse](
			httpClient,
			baseURL+AppServiceCreateAppProcedure,
			connect.WithSchema(appServiceCreateAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApp: connect.NewClient[v1.UpdateAppRequest, v1.UpdateAppResponse](
			httpClient,
			baseURL+AppServiceUpdateAppProcedure,
			connect.WithSchema(appServiceUpdateAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseApp: connect.NewClient[v1.PauseAppRequest, v1.PauseAppResponse](
			httpClient,
			baseURL+AppServicePauseAppProcedure,
			connect.WithSchema(appServicePauseAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resumeApp: connect.NewClient[v1.ResumeAppRequest, v1.ResumeAppResponse](
			httpClient,
			baseURL+AppServiceResumeAppProcedure,
			connect.WithSchema(appServiceResumeAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		versionInformation: connect.NewClient[v1.VersionInformationRequest, v1.VersionInformationResponse](
			httpClient,
			baseURL+AppServiceVersionInformationProcedure,
			connect.WithSchema(appServiceVersionInformationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listConfig: connect.NewClient[v1.ListConfigRequest, v1.ListConfigResponse](
			httpClient,
			baseURL+AppServiceListConfigProcedure,
			connect.WithSchema(appServiceListConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addConfig: connect.NewClient[v1.AddConfigRequest, v1.AddConfigResponse](
			httpClient,
			baseURL+AppServiceAddConfigProcedure,
			connect.WithSchema(appServiceAddConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteConfig: connect.NewClient[v1.DeleteConfigRequest, v1.DeleteConfigResponse](
			httpClient,
			baseURL+AppServiceDeleteConfigProcedure,
			connect.WithSchema(appServiceDeleteConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateInstanceStatus: connect.NewClient[v1.UpdateInstanceStatusRequest, v1.UpdateInstanceStatusResponse](
			httpClient,
			baseURL+AppServiceUpdateInstanceStatusProcedure,
			connect.WithSchema(appServiceUpdateInstanceStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVClusterToken: connect.NewClient[v1.GetVClusterTokenRequest, v1.GetVClusterTokenResponse](
			httpClient,
			baseURL+AppServiceGetVClusterTokenProcedure,
			connect.WithSchema(appServiceGetVClusterTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// appServiceClient implements AppServiceClient.
type appServiceClient struct {
	checkHealth          *connect.Client[v1.CheckHealthRequest, v1.CheckHealthResponse]
	setLogLevel          *connect.Client[v1.SetLoglevelRequest, v1.SetLoglevelResponse]
	listApp              *connect.Client[v1.ListAppRequest, v1.ListAppResponse]
	deleteApp            *connect.Client[v1.DeleteAppRequest, v1.DeleteAppResponse]
	getApp               *connect.Client[v1.GetAppRequest, v1.GetAppResponse]
	createApp            *connect.Client[v1.CreateAppRequest, v1.CreateAppResponse]
	updateApp            *connect.Client[v1.UpdateAppRequest, v1.UpdateAppResponse]
	pauseApp             *connect.Client[v1.PauseAppRequest, v1.PauseAppResponse]
	resumeApp            *connect.Client[v1.ResumeAppRequest, v1.ResumeAppResponse]
	versionInformation   *connect.Client[v1.VersionInformationRequest, v1.VersionInformationResponse]
	listConfig           *connect.Client[v1.ListConfigRequest, v1.ListConfigResponse]
	addConfig            *connect.Client[v1.AddConfigRequest, v1.AddConfigResponse]
	deleteConfig         *connect.Client[v1.DeleteConfigRequest, v1.DeleteConfigResponse]
	updateInstanceStatus *connect.Client[v1.UpdateInstanceStatusRequest, v1.UpdateInstanceStatusResponse]
	getVClusterToken     *connect.Client[v1.GetVClusterTokenRequest, v1.GetVClusterTokenResponse]
}

// CheckHealth calls datacanvas.gcp.osm.app.v1.AppService.CheckHealth.
func (c *appServiceClient) CheckHealth(ctx context.Context, req *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error) {
	return c.checkHealth.CallUnary(ctx, req)
}

// SetLogLevel calls datacanvas.gcp.osm.app.v1.AppService.SetLogLevel.
func (c *appServiceClient) SetLogLevel(ctx context.Context, req *connect.Request[v1.SetLoglevelRequest]) (*connect.Response[v1.SetLoglevelResponse], error) {
	return c.setLogLevel.CallUnary(ctx, req)
}

// ListApp calls datacanvas.gcp.osm.app.v1.AppService.ListApp.
func (c *appServiceClient) ListApp(ctx context.Context, req *connect.Request[v1.ListAppRequest]) (*connect.Response[v1.ListAppResponse], error) {
	return c.listApp.CallUnary(ctx, req)
}

// DeleteApp calls datacanvas.gcp.osm.app.v1.AppService.DeleteApp.
func (c *appServiceClient) DeleteApp(ctx context.Context, req *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return c.deleteApp.CallUnary(ctx, req)
}

// GetApp calls datacanvas.gcp.osm.app.v1.AppService.GetApp.
func (c *appServiceClient) GetApp(ctx context.Context, req *connect.Request[v1.GetAppRequest]) (*connect.Response[v1.GetAppResponse], error) {
	return c.getApp.CallUnary(ctx, req)
}

// CreateApp calls datacanvas.gcp.osm.app.v1.AppService.CreateApp.
func (c *appServiceClient) CreateApp(ctx context.Context, req *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error) {
	return c.createApp.CallUnary(ctx, req)
}

// UpdateApp calls datacanvas.gcp.osm.app.v1.AppService.UpdateApp.
func (c *appServiceClient) UpdateApp(ctx context.Context, req *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// PauseApp calls datacanvas.gcp.osm.app.v1.AppService.PauseApp.
func (c *appServiceClient) PauseApp(ctx context.Context, req *connect.Request[v1.PauseAppRequest]) (*connect.Response[v1.PauseAppResponse], error) {
	return c.pauseApp.CallUnary(ctx, req)
}

// ResumeApp calls datacanvas.gcp.osm.app.v1.AppService.ResumeApp.
func (c *appServiceClient) ResumeApp(ctx context.Context, req *connect.Request[v1.ResumeAppRequest]) (*connect.Response[v1.ResumeAppResponse], error) {
	return c.resumeApp.CallUnary(ctx, req)
}

// VersionInformation calls datacanvas.gcp.osm.app.v1.AppService.VersionInformation.
func (c *appServiceClient) VersionInformation(ctx context.Context, req *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error) {
	return c.versionInformation.CallUnary(ctx, req)
}

// ListConfig calls datacanvas.gcp.osm.app.v1.AppService.ListConfig.
func (c *appServiceClient) ListConfig(ctx context.Context, req *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.ListConfigResponse], error) {
	return c.listConfig.CallUnary(ctx, req)
}

// AddConfig calls datacanvas.gcp.osm.app.v1.AppService.AddConfig.
func (c *appServiceClient) AddConfig(ctx context.Context, req *connect.Request[v1.AddConfigRequest]) (*connect.Response[v1.AddConfigResponse], error) {
	return c.addConfig.CallUnary(ctx, req)
}

// DeleteConfig calls datacanvas.gcp.osm.app.v1.AppService.DeleteConfig.
func (c *appServiceClient) DeleteConfig(ctx context.Context, req *connect.Request[v1.DeleteConfigRequest]) (*connect.Response[v1.DeleteConfigResponse], error) {
	return c.deleteConfig.CallUnary(ctx, req)
}

// UpdateInstanceStatus calls datacanvas.gcp.osm.app.v1.AppService.UpdateInstanceStatus.
func (c *appServiceClient) UpdateInstanceStatus(ctx context.Context, req *connect.Request[v1.UpdateInstanceStatusRequest]) (*connect.Response[v1.UpdateInstanceStatusResponse], error) {
	return c.updateInstanceStatus.CallUnary(ctx, req)
}

// GetVClusterToken calls datacanvas.gcp.osm.app.v1.AppService.GetVClusterToken.
func (c *appServiceClient) GetVClusterToken(ctx context.Context, req *connect.Request[v1.GetVClusterTokenRequest]) (*connect.Response[v1.GetVClusterTokenResponse], error) {
	return c.getVClusterToken.CallUnary(ctx, req)
}

// AppServiceHandler is an implementation of the datacanvas.gcp.osm.app.v1.AppService service.
type AppServiceHandler interface {
	// 查看gateway是否健康
	CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error)
	SetLogLevel(context.Context, *connect.Request[v1.SetLoglevelRequest]) (*connect.Response[v1.SetLoglevelResponse], error)
	ListApp(context.Context, *connect.Request[v1.ListAppRequest]) (*connect.Response[v1.ListAppResponse], error)
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	GetApp(context.Context, *connect.Request[v1.GetAppRequest]) (*connect.Response[v1.GetAppResponse], error)
	CreateApp(context.Context, *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error)
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	PauseApp(context.Context, *connect.Request[v1.PauseAppRequest]) (*connect.Response[v1.PauseAppResponse], error)
	ResumeApp(context.Context, *connect.Request[v1.ResumeAppRequest]) (*connect.Response[v1.ResumeAppResponse], error)
	VersionInformation(context.Context, *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error)
	ListConfig(context.Context, *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.ListConfigResponse], error)
	AddConfig(context.Context, *connect.Request[v1.AddConfigRequest]) (*connect.Response[v1.AddConfigResponse], error)
	DeleteConfig(context.Context, *connect.Request[v1.DeleteConfigRequest]) (*connect.Response[v1.DeleteConfigResponse], error)
	UpdateInstanceStatus(context.Context, *connect.Request[v1.UpdateInstanceStatusRequest]) (*connect.Response[v1.UpdateInstanceStatusResponse], error)
	GetVClusterToken(context.Context, *connect.Request[v1.GetVClusterTokenRequest]) (*connect.Response[v1.GetVClusterTokenResponse], error)
}

// NewAppServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppServiceHandler(svc AppServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appServiceCheckHealthHandler := connect.NewUnaryHandler(
		AppServiceCheckHealthProcedure,
		svc.CheckHealth,
		connect.WithSchema(appServiceCheckHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceSetLogLevelHandler := connect.NewUnaryHandler(
		AppServiceSetLogLevelProcedure,
		svc.SetLogLevel,
		connect.WithSchema(appServiceSetLogLevelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceListAppHandler := connect.NewUnaryHandler(
		AppServiceListAppProcedure,
		svc.ListApp,
		connect.WithSchema(appServiceListAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceDeleteAppHandler := connect.NewUnaryHandler(
		AppServiceDeleteAppProcedure,
		svc.DeleteApp,
		connect.WithSchema(appServiceDeleteAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceGetAppHandler := connect.NewUnaryHandler(
		AppServiceGetAppProcedure,
		svc.GetApp,
		connect.WithSchema(appServiceGetAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceCreateAppHandler := connect.NewUnaryHandler(
		AppServiceCreateAppProcedure,
		svc.CreateApp,
		connect.WithSchema(appServiceCreateAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceUpdateAppHandler := connect.NewUnaryHandler(
		AppServiceUpdateAppProcedure,
		svc.UpdateApp,
		connect.WithSchema(appServiceUpdateAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServicePauseAppHandler := connect.NewUnaryHandler(
		AppServicePauseAppProcedure,
		svc.PauseApp,
		connect.WithSchema(appServicePauseAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceResumeAppHandler := connect.NewUnaryHandler(
		AppServiceResumeAppProcedure,
		svc.ResumeApp,
		connect.WithSchema(appServiceResumeAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceVersionInformationHandler := connect.NewUnaryHandler(
		AppServiceVersionInformationProcedure,
		svc.VersionInformation,
		connect.WithSchema(appServiceVersionInformationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceListConfigHandler := connect.NewUnaryHandler(
		AppServiceListConfigProcedure,
		svc.ListConfig,
		connect.WithSchema(appServiceListConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceAddConfigHandler := connect.NewUnaryHandler(
		AppServiceAddConfigProcedure,
		svc.AddConfig,
		connect.WithSchema(appServiceAddConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceDeleteConfigHandler := connect.NewUnaryHandler(
		AppServiceDeleteConfigProcedure,
		svc.DeleteConfig,
		connect.WithSchema(appServiceDeleteConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceUpdateInstanceStatusHandler := connect.NewUnaryHandler(
		AppServiceUpdateInstanceStatusProcedure,
		svc.UpdateInstanceStatus,
		connect.WithSchema(appServiceUpdateInstanceStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceGetVClusterTokenHandler := connect.NewUnaryHandler(
		AppServiceGetVClusterTokenProcedure,
		svc.GetVClusterToken,
		connect.WithSchema(appServiceGetVClusterTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/datacanvas.gcp.osm.app.v1.AppService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppServiceCheckHealthProcedure:
			appServiceCheckHealthHandler.ServeHTTP(w, r)
		case AppServiceSetLogLevelProcedure:
			appServiceSetLogLevelHandler.ServeHTTP(w, r)
		case AppServiceListAppProcedure:
			appServiceListAppHandler.ServeHTTP(w, r)
		case AppServiceDeleteAppProcedure:
			appServiceDeleteAppHandler.ServeHTTP(w, r)
		case AppServiceGetAppProcedure:
			appServiceGetAppHandler.ServeHTTP(w, r)
		case AppServiceCreateAppProcedure:
			appServiceCreateAppHandler.ServeHTTP(w, r)
		case AppServiceUpdateAppProcedure:
			appServiceUpdateAppHandler.ServeHTTP(w, r)
		case AppServicePauseAppProcedure:
			appServicePauseAppHandler.ServeHTTP(w, r)
		case AppServiceResumeAppProcedure:
			appServiceResumeAppHandler.ServeHTTP(w, r)
		case AppServiceVersionInformationProcedure:
			appServiceVersionInformationHandler.ServeHTTP(w, r)
		case AppServiceListConfigProcedure:
			appServiceListConfigHandler.ServeHTTP(w, r)
		case AppServiceAddConfigProcedure:
			appServiceAddConfigHandler.ServeHTTP(w, r)
		case AppServiceDeleteConfigProcedure:
			appServiceDeleteConfigHandler.ServeHTTP(w, r)
		case AppServiceUpdateInstanceStatusProcedure:
			appServiceUpdateInstanceStatusHandler.ServeHTTP(w, r)
		case AppServiceGetVClusterTokenProcedure:
			appServiceGetVClusterTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppServiceHandler struct{}

func (UnimplementedAppServiceHandler) CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.CheckHealth is not implemented"))
}

func (UnimplementedAppServiceHandler) SetLogLevel(context.Context, *connect.Request[v1.SetLoglevelRequest]) (*connect.Response[v1.SetLoglevelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.SetLogLevel is not implemented"))
}

func (UnimplementedAppServiceHandler) ListApp(context.Context, *connect.Request[v1.ListAppRequest]) (*connect.Response[v1.ListAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.ListApp is not implemented"))
}

func (UnimplementedAppServiceHandler) DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.DeleteApp is not implemented"))
}

func (UnimplementedAppServiceHandler) GetApp(context.Context, *connect.Request[v1.GetAppRequest]) (*connect.Response[v1.GetAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.GetApp is not implemented"))
}

func (UnimplementedAppServiceHandler) CreateApp(context.Context, *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.CreateApp is not implemented"))
}

func (UnimplementedAppServiceHandler) UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.UpdateApp is not implemented"))
}

func (UnimplementedAppServiceHandler) PauseApp(context.Context, *connect.Request[v1.PauseAppRequest]) (*connect.Response[v1.PauseAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.PauseApp is not implemented"))
}

func (UnimplementedAppServiceHandler) ResumeApp(context.Context, *connect.Request[v1.ResumeAppRequest]) (*connect.Response[v1.ResumeAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.ResumeApp is not implemented"))
}

func (UnimplementedAppServiceHandler) VersionInformation(context.Context, *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.VersionInformation is not implemented"))
}

func (UnimplementedAppServiceHandler) ListConfig(context.Context, *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.ListConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.ListConfig is not implemented"))
}

func (UnimplementedAppServiceHandler) AddConfig(context.Context, *connect.Request[v1.AddConfigRequest]) (*connect.Response[v1.AddConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.AddConfig is not implemented"))
}

func (UnimplementedAppServiceHandler) DeleteConfig(context.Context, *connect.Request[v1.DeleteConfigRequest]) (*connect.Response[v1.DeleteConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.DeleteConfig is not implemented"))
}

func (UnimplementedAppServiceHandler) UpdateInstanceStatus(context.Context, *connect.Request[v1.UpdateInstanceStatusRequest]) (*connect.Response[v1.UpdateInstanceStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.UpdateInstanceStatus is not implemented"))
}

func (UnimplementedAppServiceHandler) GetVClusterToken(context.Context, *connect.Request[v1.GetVClusterTokenRequest]) (*connect.Response[v1.GetVClusterTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.app.v1.AppService.GetVClusterToken is not implemented"))
}
