// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: datacanvas/gcp/osm/vcluster_1.1/v1/vcluster.proto

package vclusterv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "gitlab.datacanvas.com/AlayaNeW/OSM/gokit/genproto/gcpapis/http/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "k8s.io/api/apps/v1"
	_ "k8s.io/api/core/v1"
	_ "k8s.io/api/networking/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 检查服务健康状态请求
type CheckHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckHealthRequest) Reset() {
	*x = CheckHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHealthRequest) ProtoMessage() {}

func (x *CheckHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHealthRequest.ProtoReflect.Descriptor instead.
func (*CheckHealthRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{0}
}

// 检查服务健康状态响应
type CheckHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 详细信息
}

func (x *CheckHealthResponse) Reset() {
	*x = CheckHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHealthResponse) ProtoMessage() {}

func (x *CheckHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHealthResponse.ProtoReflect.Descriptor instead.
func (*CheckHealthResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{1}
}

func (x *CheckHealthResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckHealthResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 版本信息请求
type VersionInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionInformationRequest) Reset() {
	*x = VersionInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInformationRequest) ProtoMessage() {}

func (x *VersionInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInformationRequest.ProtoReflect.Descriptor instead.
func (*VersionInformationRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{2}
}

// 版本信息响应
type VersionInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *VersionInformationResponse_Info `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VersionInformationResponse) Reset() {
	*x = VersionInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInformationResponse) ProtoMessage() {}

func (x *VersionInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInformationResponse.ProtoReflect.Descriptor instead.
func (*VersionInformationResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{3}
}

func (x *VersionInformationResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VersionInformationResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *VersionInformationResponse) GetData() *VersionInformationResponse_Info {
	if x != nil {
		return x.Data
	}
	return nil
}

// 创建 vCluster 请求
type CreateVClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderlist        []*CreateVClusterRequest_Orderlist      `protobuf:"bytes,1,rep,name=orderlist,proto3" json:"orderlist,omitempty"`
	VclusterName     string                                  `protobuf:"bytes,2,opt,name=vcluster_name,json=vclusterName,proto3" json:"vcluster_name,omitempty"`
	VclusterDesc     string                                  `protobuf:"bytes,3,opt,name=vcluster_desc,json=vclusterDesc,proto3" json:"vcluster_desc,omitempty"`
	UserName         string                                  `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	TenantId         string                                  `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name             string                                  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Desc             string                                  `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	IsInit           bool                                    `protobuf:"varint,8,opt,name=is_init,json=isInit,proto3" json:"is_init,omitempty"`
	EnableHa         bool                                    `protobuf:"varint,9,opt,name=enable_ha,json=enableHa,proto3" json:"enable_ha,omitempty"`
	CustomHelmConfig *CreateVClusterRequest_CustomHelmConfig `protobuf:"bytes,10,opt,name=custom_helm_config,json=customHelmConfig,proto3" json:"custom_helm_config,omitempty"`
}

func (x *CreateVClusterRequest) Reset() {
	*x = CreateVClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterRequest) ProtoMessage() {}

func (x *CreateVClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateVClusterRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{4}
}

func (x *CreateVClusterRequest) GetOrderlist() []*CreateVClusterRequest_Orderlist {
	if x != nil {
		return x.Orderlist
	}
	return nil
}

func (x *CreateVClusterRequest) GetVclusterName() string {
	if x != nil {
		return x.VclusterName
	}
	return ""
}

func (x *CreateVClusterRequest) GetVclusterDesc() string {
	if x != nil {
		return x.VclusterDesc
	}
	return ""
}

func (x *CreateVClusterRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateVClusterRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateVClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVClusterRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateVClusterRequest) GetIsInit() bool {
	if x != nil {
		return x.IsInit
	}
	return false
}

func (x *CreateVClusterRequest) GetEnableHa() bool {
	if x != nil {
		return x.EnableHa
	}
	return false
}

func (x *CreateVClusterRequest) GetCustomHelmConfig() *CreateVClusterRequest_CustomHelmConfig {
	if x != nil {
		return x.CustomHelmConfig
	}
	return nil
}

// 创建 vCluster 响应
type CreateVClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CreateVClusterResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateVClusterResponse) Reset() {
	*x = CreateVClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterResponse) ProtoMessage() {}

func (x *CreateVClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateVClusterResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVClusterResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateVClusterResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateVClusterResponse) GetData() *CreateVClusterResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除 vCluster 请求
type DeleteVClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
}

func (x *DeleteVClusterRequest) Reset() {
	*x = DeleteVClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVClusterRequest) ProtoMessage() {}

func (x *DeleteVClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteVClusterRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteVClusterRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// 删除 vCluster 响应
type DeleteVClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *DeleteVClusterResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteVClusterResponse) Reset() {
	*x = DeleteVClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVClusterResponse) ProtoMessage() {}

func (x *DeleteVClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteVClusterResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteVClusterResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteVClusterResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteVClusterResponse) GetData() *DeleteVClusterResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取 vCluster KubeConfig 请求
type GetKubeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
}

func (x *GetKubeConfigRequest) Reset() {
	*x = GetKubeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigRequest) ProtoMessage() {}

func (x *GetKubeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigRequest.ProtoReflect.Descriptor instead.
func (*GetKubeConfigRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{8}
}

func (x *GetKubeConfigRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// 获取 vCluster KubeConfig 响应
type GetKubeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetKubeConfigResponse_KubeConfig `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetKubeConfigResponse) Reset() {
	*x = GetKubeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse) ProtoMessage() {}

func (x *GetKubeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9}
}

func (x *GetKubeConfigResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetKubeConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetKubeConfigResponse) GetData() *GetKubeConfigResponse_KubeConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取 vCluster KubeConfig 响应
type GetKubeConfigBase64Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetKubeConfigBase64Response) Reset() {
	*x = GetKubeConfigBase64Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigBase64Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigBase64Response) ProtoMessage() {}

func (x *GetKubeConfigBase64Response) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigBase64Response.ProtoReflect.Descriptor instead.
func (*GetKubeConfigBase64Response) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{10}
}

func (x *GetKubeConfigBase64Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetKubeConfigBase64Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetKubeConfigBase64Response) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 暂停 vCluster 请求
type PauseVClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
}

func (x *PauseVClusterRequest) Reset() {
	*x = PauseVClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseVClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVClusterRequest) ProtoMessage() {}

func (x *PauseVClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVClusterRequest.ProtoReflect.Descriptor instead.
func (*PauseVClusterRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{11}
}

func (x *PauseVClusterRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// 暂停 vCluster 响应
type PauseVClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *PauseVClusterResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PauseVClusterResponse) Reset() {
	*x = PauseVClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseVClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVClusterResponse) ProtoMessage() {}

func (x *PauseVClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVClusterResponse.ProtoReflect.Descriptor instead.
func (*PauseVClusterResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{12}
}

func (x *PauseVClusterResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PauseVClusterResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PauseVClusterResponse) GetData() *PauseVClusterResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询 vCluster 状态请求
type QueryOperateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *QueryOperateStatusRequest) Reset() {
	*x = QueryOperateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateStatusRequest) ProtoMessage() {}

func (x *QueryOperateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryOperateStatusRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{13}
}

func (x *QueryOperateStatusRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *QueryOperateStatusRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// 查询 vCluster 状态响应
type QueryOperateStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0 表示成功
	Msg  string                           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *QueryOperateStatusResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 响应数据
}

func (x *QueryOperateStatusResponse) Reset() {
	*x = QueryOperateStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateStatusResponse) ProtoMessage() {}

func (x *QueryOperateStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryOperateStatusResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{14}
}

func (x *QueryOperateStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryOperateStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryOperateStatusResponse) GetData() *QueryOperateStatusResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 恢复 vCluster 请求
type ResumeVClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
}

func (x *ResumeVClusterRequest) Reset() {
	*x = ResumeVClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeVClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVClusterRequest) ProtoMessage() {}

func (x *ResumeVClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVClusterRequest.ProtoReflect.Descriptor instead.
func (*ResumeVClusterRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{15}
}

func (x *ResumeVClusterRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// 恢复 vCluster 响应
type ResumeVClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ResumeVClusterResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResumeVClusterResponse) Reset() {
	*x = ResumeVClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeVClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVClusterResponse) ProtoMessage() {}

func (x *ResumeVClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVClusterResponse.ProtoReflect.Descriptor instead.
func (*ResumeVClusterResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{16}
}

func (x *ResumeVClusterResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResumeVClusterResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ResumeVClusterResponse) GetData() *ResumeVClusterResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新 vCluster 请求
type UpdateVClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderlist        []*UpdateVClusterRequest_Orderlist      `protobuf:"bytes,1,rep,name=orderlist,proto3" json:"orderlist,omitempty"`
	VclusterName     string                                  `protobuf:"bytes,2,opt,name=vcluster_name,json=vclusterName,proto3" json:"vcluster_name,omitempty"`
	VclusterDesc     string                                  `protobuf:"bytes,3,opt,name=vcluster_desc,json=vclusterDesc,proto3" json:"vcluster_desc,omitempty"`
	UserName         string                                  `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	TenantId         string                                  `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name             string                                  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Desc             string                                  `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	AppId            string                                  `protobuf:"bytes,8,opt,name=app_id,proto3" json:"app_id,omitempty"`
	IsInit           bool                                    `protobuf:"varint,9,opt,name=is_init,json=isInit,proto3" json:"is_init,omitempty"`
	EnableHa         bool                                    `protobuf:"varint,10,opt,name=enable_ha,json=enableHa,proto3" json:"enable_ha,omitempty"`
	CustomHelmConfig *UpdateVClusterRequest_CustomHelmConfig `protobuf:"bytes,11,opt,name=custom_helm_config,json=customHelmConfig,proto3" json:"custom_helm_config,omitempty"`
}

func (x *UpdateVClusterRequest) Reset() {
	*x = UpdateVClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterRequest) ProtoMessage() {}

func (x *UpdateVClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateVClusterRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateVClusterRequest) GetOrderlist() []*UpdateVClusterRequest_Orderlist {
	if x != nil {
		return x.Orderlist
	}
	return nil
}

func (x *UpdateVClusterRequest) GetVclusterName() string {
	if x != nil {
		return x.VclusterName
	}
	return ""
}

func (x *UpdateVClusterRequest) GetVclusterDesc() string {
	if x != nil {
		return x.VclusterDesc
	}
	return ""
}

func (x *UpdateVClusterRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateVClusterRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateVClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVClusterRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateVClusterRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UpdateVClusterRequest) GetIsInit() bool {
	if x != nil {
		return x.IsInit
	}
	return false
}

func (x *UpdateVClusterRequest) GetEnableHa() bool {
	if x != nil {
		return x.EnableHa
	}
	return false
}

func (x *UpdateVClusterRequest) GetCustomHelmConfig() *UpdateVClusterRequest_CustomHelmConfig {
	if x != nil {
		return x.CustomHelmConfig
	}
	return nil
}

// 更新 vCluster 响应
type UpdateVClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UpdateVClusterResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateVClusterResponse) Reset() {
	*x = UpdateVClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterResponse) ProtoMessage() {}

func (x *UpdateVClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateVClusterResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateVClusterResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateVClusterResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateVClusterResponse) GetData() *UpdateVClusterResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVClusterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
}

func (x *GetVClusterStatusRequest) Reset() {
	*x = GetVClusterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterStatusRequest) ProtoMessage() {}

func (x *GetVClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*GetVClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{19}
}

func (x *GetVClusterStatusRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetVClusterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetVClusterStatusResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVClusterStatusResponse) Reset() {
	*x = GetVClusterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterStatusResponse) ProtoMessage() {}

func (x *GetVClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*GetVClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{20}
}

func (x *GetVClusterStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVClusterStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetVClusterStatusResponse) GetData() *GetVClusterStatusResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取 vCluster 集群资源配额 请求
type GetVClusterResourceDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
}

func (x *GetVClusterResourceDetailsRequest) Reset() {
	*x = GetVClusterResourceDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterResourceDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterResourceDetailsRequest) ProtoMessage() {}

func (x *GetVClusterResourceDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterResourceDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetVClusterResourceDetailsRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{21}
}

func (x *GetVClusterResourceDetailsRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// 获取 vCluster 集群资源配额 响应
type GetVClusterResourceDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetVClusterResourceDetailsResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVClusterResourceDetailsResponse) Reset() {
	*x = GetVClusterResourceDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterResourceDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterResourceDetailsResponse) ProtoMessage() {}

func (x *GetVClusterResourceDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterResourceDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetVClusterResourceDetailsResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{22}
}

func (x *GetVClusterResourceDetailsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVClusterResourceDetailsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetVClusterResourceDetailsResponse) GetData() *GetVClusterResourceDetailsResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVClusterContainerIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VclusterId    string `protobuf:"bytes,1,opt,name=vcluster_id,proto3" json:"vcluster_id,omitempty"`
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName       string `protobuf:"bytes,3,opt,name=pod_name,proto3" json:"pod_name,omitempty"`
	ContainerName string `protobuf:"bytes,4,opt,name=container_name,proto3" json:"container_name,omitempty"`
}

func (x *GetVClusterContainerIDRequest) Reset() {
	*x = GetVClusterContainerIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterContainerIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterContainerIDRequest) ProtoMessage() {}

func (x *GetVClusterContainerIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterContainerIDRequest.ProtoReflect.Descriptor instead.
func (*GetVClusterContainerIDRequest) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{23}
}

func (x *GetVClusterContainerIDRequest) GetVclusterId() string {
	if x != nil {
		return x.VclusterId
	}
	return ""
}

func (x *GetVClusterContainerIDRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetVClusterContainerIDRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GetVClusterContainerIDRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type GetVClusterContainerIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetVClusterContainerIDResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVClusterContainerIDResponse) Reset() {
	*x = GetVClusterContainerIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterContainerIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterContainerIDResponse) ProtoMessage() {}

func (x *GetVClusterContainerIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterContainerIDResponse.ProtoReflect.Descriptor instead.
func (*GetVClusterContainerIDResponse) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{24}
}

func (x *GetVClusterContainerIDResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVClusterContainerIDResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetVClusterContainerIDResponse) GetData() *GetVClusterContainerIDResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type VersionInformationResponse_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	BuildAt   string `protobuf:"bytes,3,opt,name=build_at,json=buildAt,proto3" json:"build_at,omitempty"`
}

func (x *VersionInformationResponse_Info) Reset() {
	*x = VersionInformationResponse_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInformationResponse_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInformationResponse_Info) ProtoMessage() {}

func (x *VersionInformationResponse_Info) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInformationResponse_Info.ProtoReflect.Descriptor instead.
func (*VersionInformationResponse_Info) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{3, 0}
}

func (x *VersionInformationResponse_Info) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionInformationResponse_Info) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *VersionInformationResponse_Info) GetBuildAt() string {
	if x != nil {
		return x.BuildAt
	}
	return ""
}

type CreateVClusterRequest_Orderlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderInfo          *CreateVClusterRequest_Orderlist_OrderInfo      `protobuf:"bytes,1,opt,name=order_info,json=orderInfo,proto3" json:"order_info,omitempty"`
	InstanceId         string                                          `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	NodePoolInstanceId string                                          `protobuf:"bytes,3,opt,name=node_pool_instance_id,json=nodePoolInstanceId,proto3" json:"node_pool_instance_id,omitempty"`
	InstanceSpec       []*CreateVClusterRequest_Orderlist_InstanceSpec `protobuf:"bytes,4,rep,name=instance_spec,json=instanceSpec,proto3" json:"instance_spec,omitempty"`
}

func (x *CreateVClusterRequest_Orderlist) Reset() {
	*x = CreateVClusterRequest_Orderlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterRequest_Orderlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterRequest_Orderlist) ProtoMessage() {}

func (x *CreateVClusterRequest_Orderlist) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterRequest_Orderlist.ProtoReflect.Descriptor instead.
func (*CreateVClusterRequest_Orderlist) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CreateVClusterRequest_Orderlist) GetOrderInfo() *CreateVClusterRequest_Orderlist_OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *CreateVClusterRequest_Orderlist) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist) GetNodePoolInstanceId() string {
	if x != nil {
		return x.NodePoolInstanceId
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist) GetInstanceSpec() []*CreateVClusterRequest_Orderlist_InstanceSpec {
	if x != nil {
		return x.InstanceSpec
	}
	return nil
}

type CreateVClusterRequest_CustomHelmConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo                string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`                                                           // Helm 仓库地址
	ValuesContent       string `protobuf:"bytes,2,opt,name=values_content,json=valuesContent,proto3" json:"values_content,omitempty"`                    // YAML 格式的完整 values 内容
	EnableCustomization bool   `protobuf:"varint,3,opt,name=enable_customization,json=enableCustomization,proto3" json:"enable_customization,omitempty"` // 是否启用自定义 Helm 配置
}

func (x *CreateVClusterRequest_CustomHelmConfig) Reset() {
	*x = CreateVClusterRequest_CustomHelmConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterRequest_CustomHelmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterRequest_CustomHelmConfig) ProtoMessage() {}

func (x *CreateVClusterRequest_CustomHelmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterRequest_CustomHelmConfig.ProtoReflect.Descriptor instead.
func (*CreateVClusterRequest_CustomHelmConfig) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CreateVClusterRequest_CustomHelmConfig) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CreateVClusterRequest_CustomHelmConfig) GetValuesContent() string {
	if x != nil {
		return x.ValuesContent
	}
	return ""
}

func (x *CreateVClusterRequest_CustomHelmConfig) GetEnableCustomization() bool {
	if x != nil {
		return x.EnableCustomization
	}
	return false
}

type CreateVClusterRequest_Orderlist_OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId        int32  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductCode      string `protobuf:"bytes,2,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	CycleCount       int32  `protobuf:"varint,3,opt,name=cycle_count,json=cycleCount,proto3" json:"cycle_count,omitempty"`
	Amount           int32  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	OrderType        int32  `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	ResourceTypeId   int32  `protobuf:"varint,6,opt,name=resource_type_id,json=resourceTypeId,proto3" json:"resource_type_id,omitempty"`
	ResourceTypeCode string `protobuf:"bytes,7,opt,name=resource_type_code,json=resourceTypeCode,proto3" json:"resource_type_code,omitempty"`
	ActualAmount     int32  `protobuf:"varint,8,opt,name=actual_amount,json=actualAmount,proto3" json:"actual_amount,omitempty"`
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) Reset() {
	*x = CreateVClusterRequest_Orderlist_OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterRequest_Orderlist_OrderInfo) ProtoMessage() {}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterRequest_Orderlist_OrderInfo.ProtoReflect.Descriptor instead.
func (*CreateVClusterRequest_Orderlist_OrderInfo) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetCycleCount() int32 {
	if x != nil {
		return x.CycleCount
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetResourceTypeId() int32 {
	if x != nil {
		return x.ResourceTypeId
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetResourceTypeCode() string {
	if x != nil {
		return x.ResourceTypeCode
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist_OrderInfo) GetActualAmount() int32 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

type CreateVClusterRequest_Orderlist_InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSpecId        int32  `protobuf:"varint,1,opt,name=resource_spec_id,json=resourceSpecId,proto3" json:"resource_spec_id,omitempty"`
	ResourceSpecCode      string `protobuf:"bytes,2,opt,name=resource_spec_code,json=resourceSpecCode,proto3" json:"resource_spec_code,omitempty"`
	ResourceSpecParamId   int32  `protobuf:"varint,3,opt,name=resource_spec_param_id,json=resourceSpecParamId,proto3" json:"resource_spec_param_id,omitempty"`
	ResourceSpecParamCode string `protobuf:"bytes,4,opt,name=resource_spec_param_code,json=resourceSpecParamCode,proto3" json:"resource_spec_param_code,omitempty"`
	ParamName             string `protobuf:"bytes,5,opt,name=param_name,json=paramName,proto3" json:"param_name,omitempty"`
	ParamValue            string `protobuf:"bytes,6,opt,name=param_value,json=paramValue,proto3" json:"param_value,omitempty"`
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) Reset() {
	*x = CreateVClusterRequest_Orderlist_InstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterRequest_Orderlist_InstanceSpec) ProtoMessage() {}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterRequest_Orderlist_InstanceSpec.ProtoReflect.Descriptor instead.
func (*CreateVClusterRequest_Orderlist_InstanceSpec) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecId() int32 {
	if x != nil {
		return x.ResourceSpecId
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecCode() string {
	if x != nil {
		return x.ResourceSpecCode
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecParamId() int32 {
	if x != nil {
		return x.ResourceSpecParamId
	}
	return 0
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecParamCode() string {
	if x != nil {
		return x.ResourceSpecParamCode
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *CreateVClusterRequest_Orderlist_InstanceSpec) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

type CreateVClusterResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *CreateVClusterResponse_Data) Reset() {
	*x = CreateVClusterResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVClusterResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVClusterResponse_Data) ProtoMessage() {}

func (x *CreateVClusterResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVClusterResponse_Data.ProtoReflect.Descriptor instead.
func (*CreateVClusterResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CreateVClusterResponse_Data) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type DeleteVClusterResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVClusterResponse_Data) Reset() {
	*x = DeleteVClusterResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVClusterResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVClusterResponse_Data) ProtoMessage() {}

func (x *DeleteVClusterResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVClusterResponse_Data.ProtoReflect.Descriptor instead.
func (*DeleteVClusterResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{7, 0}
}

type GetKubeConfigResponse_KubeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion     string                                           `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Clusters       []*GetKubeConfigResponse_KubeConfig_NamedCluster `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Contexts       []*GetKubeConfigResponse_KubeConfig_NamedContext `protobuf:"bytes,3,rep,name=contexts,proto3" json:"contexts,omitempty"`
	CurrentContext string                                           `protobuf:"bytes,4,opt,name=current_context,json=current-context,proto3" json:"current_context,omitempty"`
	Kind           string                                           `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	Preferences    *GetKubeConfigResponse_KubeConfig_Preferences    `protobuf:"bytes,6,opt,name=preferences,proto3" json:"preferences,omitempty"`
	Users          []*GetKubeConfigResponse_KubeConfig_NamedUser    `protobuf:"bytes,7,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig) Reset() {
	*x = GetKubeConfigResponse_KubeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetKubeConfigResponse_KubeConfig) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *GetKubeConfigResponse_KubeConfig) GetClusters() []*GetKubeConfigResponse_KubeConfig_NamedCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *GetKubeConfigResponse_KubeConfig) GetContexts() []*GetKubeConfigResponse_KubeConfig_NamedContext {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *GetKubeConfigResponse_KubeConfig) GetCurrentContext() string {
	if x != nil {
		return x.CurrentContext
	}
	return ""
}

func (x *GetKubeConfigResponse_KubeConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetKubeConfigResponse_KubeConfig) GetPreferences() *GetKubeConfigResponse_KubeConfig_Preferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *GetKubeConfigResponse_KubeConfig) GetUsers() []*GetKubeConfigResponse_KubeConfig_NamedUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetKubeConfigResponse_KubeConfig_NamedCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Name    string                                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_NamedCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_NamedCluster) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_NamedCluster.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_NamedCluster) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster) GetCluster() *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetKubeConfigResponse_KubeConfig_NamedContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *GetKubeConfigResponse_KubeConfig_NamedContext_Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Name    string                                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_NamedContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_NamedContext) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_NamedContext.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_NamedContext) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 1}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext) GetContext() *GetKubeConfigResponse_KubeConfig_NamedContext_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetKubeConfigResponse_KubeConfig_Preferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKubeConfigResponse_KubeConfig_Preferences) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_Preferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_Preferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_Preferences) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_Preferences) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_Preferences.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_Preferences) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 2}
}

type GetKubeConfigResponse_KubeConfig_NamedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *GetKubeConfigResponse_KubeConfig_NamedUser_User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Name string                                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_NamedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_NamedUser) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_NamedUser.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_NamedUser) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 3}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser) GetUser() *GetKubeConfigResponse_KubeConfig_NamedUser_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsecureSkipTlsVerify bool   `protobuf:"varint,1,opt,name=insecure_skip_tls_verify,json=insecure-skip-tls-verify,proto3" json:"insecure_skip_tls_verify,omitempty"`
	Server                string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 0, 0}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) GetInsecureSkipTlsVerify() bool {
	if x != nil {
		return x.InsecureSkipTlsVerify
	}
	return false
}

func (x *GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type GetKubeConfigResponse_KubeConfig_NamedContext_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	User    string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext_Context) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_NamedContext_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_NamedContext_Context) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext_Context) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_NamedContext_Context.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_NamedContext_Context) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 1, 0}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext_Context) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetKubeConfigResponse_KubeConfig_NamedContext_Context) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type GetKubeConfigResponse_KubeConfig_NamedUser_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser_User) Reset() {
	*x = GetKubeConfigResponse_KubeConfig_NamedUser_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigResponse_KubeConfig_NamedUser_User) ProtoMessage() {}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser_User) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigResponse_KubeConfig_NamedUser_User.ProtoReflect.Descriptor instead.
func (*GetKubeConfigResponse_KubeConfig_NamedUser_User) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{9, 0, 3, 0}
}

func (x *GetKubeConfigResponse_KubeConfig_NamedUser_User) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PauseVClusterResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseVClusterResponse_Data) Reset() {
	*x = PauseVClusterResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseVClusterResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVClusterResponse_Data) ProtoMessage() {}

func (x *PauseVClusterResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVClusterResponse_Data.ProtoReflect.Descriptor instead.
func (*PauseVClusterResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{12, 0}
}

type QueryOperateStatusResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  string `protobuf:"bytes,1,opt,name=app_id,proto3" json:"app_id,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // 操作状态，例如 success
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"` // 操作失败原因
}

func (x *QueryOperateStatusResponse_Data) Reset() {
	*x = QueryOperateStatusResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateStatusResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateStatusResponse_Data) ProtoMessage() {}

func (x *QueryOperateStatusResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateStatusResponse_Data.ProtoReflect.Descriptor instead.
func (*QueryOperateStatusResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{14, 0}
}

func (x *QueryOperateStatusResponse_Data) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *QueryOperateStatusResponse_Data) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *QueryOperateStatusResponse_Data) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ResumeVClusterResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeVClusterResponse_Data) Reset() {
	*x = ResumeVClusterResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeVClusterResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVClusterResponse_Data) ProtoMessage() {}

func (x *ResumeVClusterResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVClusterResponse_Data.ProtoReflect.Descriptor instead.
func (*ResumeVClusterResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{16, 0}
}

type UpdateVClusterRequest_Orderlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderInfo          *UpdateVClusterRequest_Orderlist_OrderInfo      `protobuf:"bytes,1,opt,name=order_info,json=orderInfo,proto3" json:"order_info,omitempty"`
	InstanceId         string                                          `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	NodePoolInstanceId string                                          `protobuf:"bytes,3,opt,name=node_pool_instance_id,json=nodePoolInstanceId,proto3" json:"node_pool_instance_id,omitempty"`
	InstanceSpec       []*UpdateVClusterRequest_Orderlist_InstanceSpec `protobuf:"bytes,4,rep,name=instance_spec,json=instanceSpec,proto3" json:"instance_spec,omitempty"`
}

func (x *UpdateVClusterRequest_Orderlist) Reset() {
	*x = UpdateVClusterRequest_Orderlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterRequest_Orderlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterRequest_Orderlist) ProtoMessage() {}

func (x *UpdateVClusterRequest_Orderlist) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterRequest_Orderlist.ProtoReflect.Descriptor instead.
func (*UpdateVClusterRequest_Orderlist) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{17, 0}
}

func (x *UpdateVClusterRequest_Orderlist) GetOrderInfo() *UpdateVClusterRequest_Orderlist_OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *UpdateVClusterRequest_Orderlist) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist) GetNodePoolInstanceId() string {
	if x != nil {
		return x.NodePoolInstanceId
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist) GetInstanceSpec() []*UpdateVClusterRequest_Orderlist_InstanceSpec {
	if x != nil {
		return x.InstanceSpec
	}
	return nil
}

type UpdateVClusterRequest_CustomHelmConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo                string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`                                                           // Helm 仓库地址
	ValuesContent       string `protobuf:"bytes,2,opt,name=values_content,json=valuesContent,proto3" json:"values_content,omitempty"`                    // YAML 格式的完整 values 内容
	EnableCustomization bool   `protobuf:"varint,3,opt,name=enable_customization,json=enableCustomization,proto3" json:"enable_customization,omitempty"` // 是否启用自定义 Helm 配置
}

func (x *UpdateVClusterRequest_CustomHelmConfig) Reset() {
	*x = UpdateVClusterRequest_CustomHelmConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterRequest_CustomHelmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterRequest_CustomHelmConfig) ProtoMessage() {}

func (x *UpdateVClusterRequest_CustomHelmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterRequest_CustomHelmConfig.ProtoReflect.Descriptor instead.
func (*UpdateVClusterRequest_CustomHelmConfig) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{17, 1}
}

func (x *UpdateVClusterRequest_CustomHelmConfig) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *UpdateVClusterRequest_CustomHelmConfig) GetValuesContent() string {
	if x != nil {
		return x.ValuesContent
	}
	return ""
}

func (x *UpdateVClusterRequest_CustomHelmConfig) GetEnableCustomization() bool {
	if x != nil {
		return x.EnableCustomization
	}
	return false
}

type UpdateVClusterRequest_Orderlist_OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId        int32  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductCode      string `protobuf:"bytes,2,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	CycleCount       int32  `protobuf:"varint,3,opt,name=cycle_count,json=cycleCount,proto3" json:"cycle_count,omitempty"`
	Amount           int32  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	OrderType        int32  `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	ResourceTypeId   int32  `protobuf:"varint,6,opt,name=resource_type_id,json=resourceTypeId,proto3" json:"resource_type_id,omitempty"`
	ResourceTypeCode string `protobuf:"bytes,7,opt,name=resource_type_code,json=resourceTypeCode,proto3" json:"resource_type_code,omitempty"`
	ActualAmount     int32  `protobuf:"varint,8,opt,name=actual_amount,json=actualAmount,proto3" json:"actual_amount,omitempty"`
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) Reset() {
	*x = UpdateVClusterRequest_Orderlist_OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterRequest_Orderlist_OrderInfo) ProtoMessage() {}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterRequest_Orderlist_OrderInfo.ProtoReflect.Descriptor instead.
func (*UpdateVClusterRequest_Orderlist_OrderInfo) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{17, 0, 0}
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetCycleCount() int32 {
	if x != nil {
		return x.CycleCount
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetResourceTypeId() int32 {
	if x != nil {
		return x.ResourceTypeId
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetResourceTypeCode() string {
	if x != nil {
		return x.ResourceTypeCode
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist_OrderInfo) GetActualAmount() int32 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

type UpdateVClusterRequest_Orderlist_InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSpecId        int32  `protobuf:"varint,1,opt,name=resource_spec_id,json=resourceSpecId,proto3" json:"resource_spec_id,omitempty"`
	ResourceSpecCode      string `protobuf:"bytes,2,opt,name=resource_spec_code,json=resourceSpecCode,proto3" json:"resource_spec_code,omitempty"`
	ResourceSpecParamId   int32  `protobuf:"varint,3,opt,name=resource_spec_param_id,json=resourceSpecParamId,proto3" json:"resource_spec_param_id,omitempty"`
	ResourceSpecParamCode string `protobuf:"bytes,4,opt,name=resource_spec_param_code,json=resourceSpecParamCode,proto3" json:"resource_spec_param_code,omitempty"`
	ParamName             string `protobuf:"bytes,5,opt,name=param_name,json=paramName,proto3" json:"param_name,omitempty"`
	ParamValue            string `protobuf:"bytes,6,opt,name=param_value,json=paramValue,proto3" json:"param_value,omitempty"`
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) Reset() {
	*x = UpdateVClusterRequest_Orderlist_InstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterRequest_Orderlist_InstanceSpec) ProtoMessage() {}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterRequest_Orderlist_InstanceSpec.ProtoReflect.Descriptor instead.
func (*UpdateVClusterRequest_Orderlist_InstanceSpec) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{17, 0, 1}
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecId() int32 {
	if x != nil {
		return x.ResourceSpecId
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecCode() string {
	if x != nil {
		return x.ResourceSpecCode
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecParamId() int32 {
	if x != nil {
		return x.ResourceSpecParamId
	}
	return 0
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) GetResourceSpecParamCode() string {
	if x != nil {
		return x.ResourceSpecParamCode
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *UpdateVClusterRequest_Orderlist_InstanceSpec) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

type UpdateVClusterResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *UpdateVClusterResponse_Data) Reset() {
	*x = UpdateVClusterResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVClusterResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVClusterResponse_Data) ProtoMessage() {}

func (x *UpdateVClusterResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVClusterResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateVClusterResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UpdateVClusterResponse_Data) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type GetVClusterStatusResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetVClusterStatusResponse_Data) Reset() {
	*x = GetVClusterStatusResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterStatusResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterStatusResponse_Data) ProtoMessage() {}

func (x *GetVClusterStatusResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterStatusResponse_Data.ProtoReflect.Descriptor instead.
func (*GetVClusterStatusResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{20, 0}
}

func (x *GetVClusterStatusResponse_Data) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetVClusterResourceDetailsResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtilizationRate *GetVClusterResourceDetailsResponse_Resourcequotas `protobuf:"bytes,1,opt,name=utilization_rate,json=utilizationRate,proto3" json:"utilization_rate,omitempty"`
	Configurations  map[string]string                                  `protobuf:"bytes,2,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetVClusterResourceDetailsResponse_Data) Reset() {
	*x = GetVClusterResourceDetailsResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterResourceDetailsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterResourceDetailsResponse_Data) ProtoMessage() {}

func (x *GetVClusterResourceDetailsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterResourceDetailsResponse_Data.ProtoReflect.Descriptor instead.
func (*GetVClusterResourceDetailsResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetVClusterResourceDetailsResponse_Data) GetUtilizationRate() *GetVClusterResourceDetailsResponse_Resourcequotas {
	if x != nil {
		return x.UtilizationRate
	}
	return nil
}

func (x *GetVClusterResourceDetailsResponse_Data) GetConfigurations() map[string]string {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type GetVClusterResourceDetailsResponse_Resourcequotas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gpu     []*GetVClusterResourceDetailsResponse_Resourcequotas_Quota `protobuf:"bytes,1,rep,name=gpu,proto3" json:"gpu,omitempty"`
	Memory  map[string]float32                                         `protobuf:"bytes,2,rep,name=memory,proto3" json:"memory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Cpu     map[string]float32                                         `protobuf:"bytes,3,rep,name=cpu,proto3" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Storage []*GetVClusterResourceDetailsResponse_Resourcequotas_Quota `protobuf:"bytes,4,rep,name=storage,proto3" json:"storage,omitempty"`
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) Reset() {
	*x = GetVClusterResourceDetailsResponse_Resourcequotas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterResourceDetailsResponse_Resourcequotas) ProtoMessage() {}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterResourceDetailsResponse_Resourcequotas.ProtoReflect.Descriptor instead.
func (*GetVClusterResourceDetailsResponse_Resourcequotas) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{22, 1}
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) GetGpu() []*GetVClusterResourceDetailsResponse_Resourcequotas_Quota {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) GetMemory() map[string]float32 {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) GetCpu() map[string]float32 {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas) GetStorage() []*GetVClusterResourceDetailsResponse_Resourcequotas_Quota {
	if x != nil {
		return x.Storage
	}
	return nil
}

type GetVClusterResourceDetailsResponse_Resourcequotas_Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hard float32 `protobuf:"fixed32,2,opt,name=hard,proto3" json:"hard,omitempty"`
	Used float32 `protobuf:"fixed32,3,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas_Quota) Reset() {
	*x = GetVClusterResourceDetailsResponse_Resourcequotas_Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas_Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterResourceDetailsResponse_Resourcequotas_Quota) ProtoMessage() {}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas_Quota) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterResourceDetailsResponse_Resourcequotas_Quota.ProtoReflect.Descriptor instead.
func (*GetVClusterResourceDetailsResponse_Resourcequotas_Quota) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{22, 1, 0}
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas_Quota) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas_Quota) GetHard() float32 {
	if x != nil {
		return x.Hard
	}
	return 0
}

func (x *GetVClusterResourceDetailsResponse_Resourcequotas_Quota) GetUsed() float32 {
	if x != nil {
		return x.Used
	}
	return 0
}

type GetVClusterContainerIDResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // 容器 ID
}

func (x *GetVClusterContainerIDResponse_Data) Reset() {
	*x = GetVClusterContainerIDResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVClusterContainerIDResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVClusterContainerIDResponse_Data) ProtoMessage() {}

func (x *GetVClusterContainerIDResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVClusterContainerIDResponse_Data.ProtoReflect.Descriptor instead.
func (*GetVClusterContainerIDResponse_Data) Descriptor() ([]byte, []int) {
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GetVClusterContainerIDResponse_Data) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

var File_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto protoreflect.FileDescriptor

var file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDesc = []byte{
	0x0a, 0x31, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2f, 0x67, 0x63, 0x70,
	0x2f, 0x6f, 0x73, 0x6d, 0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x31, 0x2e,
	0x31, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x21, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2f,
	0x67, 0x63, 0x70, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1b, 0x0a, 0x19, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x22, 0xcc, 0x0b, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x12, 0x74, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf8, 0x06,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x1a, 0xa2, 0x02, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x94, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e,
	0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1c, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d,
	0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x06,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0xa1, 0x0a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8b, 0x09, 0x0a,
	0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e,
	0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x6e, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x60, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x5d, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d,
	0x73, 0x6b, 0x69, 0x70, 0x2d, 0x74, 0x6c, 0x73, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xcc, 0x01, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x53, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d,
	0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x0b,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e,
	0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61,
	0x12, 0x74, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73,
	0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x6c, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf8, 0x06, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x71, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x1a, 0xa2, 0x02, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x94, 0x02, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x80, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x6c, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x52, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e,
	0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x1e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x85, 0x09,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x5b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xcd, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x7c, 0x0a, 0x10, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e,
	0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x52, 0x0f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8b, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x69, 0x0a, 0x03, 0x67, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x75, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x6c, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x43, 0x70, 0x75,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x71, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d,
	0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x43, 0x0a,
	0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a,
	0x08, 0x43, 0x70, 0x75, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x32, 0x89, 0x18, 0x0a, 0x16, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x8a, 0xb5,
	0x18, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0xe3, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73,
	0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x28, 0x01, 0x8a, 0xb5, 0x18, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xd2, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e,
	0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x92,
	0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a,
	0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a, 0xb5, 0x18, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70,
	0x12, 0xdb, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e,
	0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5a, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28,
	0x01, 0x8a, 0xb5, 0x18, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd8,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x35, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x57, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a,
	0xb5, 0x18, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdb, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d,
	0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a,
	0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a, 0xb5, 0x18, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x34, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6a, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28,
	0x01, 0x8a, 0xb5, 0x18, 0x13, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdd,
	0x01, 0x0a, 0x0d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x34, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x92,
	0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a,
	0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a, 0xb5, 0x18, 0x0d,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0xe8,
	0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x92, 0x41,
	0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57,
	0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a, 0xb5, 0x18, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe2, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73,
	0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x92, 0x41, 0x2a,
	0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a, 0xb5, 0x18, 0x0e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x7b,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0xeb,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e,
	0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x92, 0x41, 0x2a, 0x72, 0x28,
	0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x47, 0x65, 0x74, 0x56,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x7b, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x98, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x41, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d,
	0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e,
	0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x73, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28,
	0x01, 0x8a, 0xb5, 0x18, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x7b,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xca, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x3d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb0, 0x01, 0x92, 0x41, 0x2a, 0x72, 0x28, 0x0a, 0x26, 0x0a, 0x0e, 0x58, 0x2d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28,
	0x01, 0x8a, 0xb5, 0x18, 0x16, 0x47, 0x65, 0x74, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x63, 0x12, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x69, 0x64, 0x42, 0xef, 0x03, 0x92, 0x41, 0xae, 0x01, 0x12, 0x7e, 0x0a, 0x15, 0x47,
	0x43, 0x50, 0x20, 0x4f, 0x53, 0x4d, 0x20, 0x76, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x41, 0x50, 0x49, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x43, 0x50, 0x20, 0x4f, 0x53, 0x4d, 0x20,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x63, 0x70, 0x1a,
	0x0e, 0x67, 0x63, 0x70, 0x40, 0x7a, 0x65, 0x74, 0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2a,
	0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x04, 0x2f, 0x61, 0x70,
	0x69, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x6f, 0x73,
	0x6d, 0x2e, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x56,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6b,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x64, 0x63, 0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x6f, 0x73, 0x6d,
	0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x31, 0x2e, 0x31, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x44, 0x47,
	0x4f, 0x56, 0xaa, 0x02, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x47, 0x63, 0x70, 0x2e, 0x4f, 0x73, 0x6d, 0x2e, 0x56, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x5c, 0x47, 0x63, 0x70, 0x5c, 0x4f, 0x73, 0x6d, 0x5c, 0x56, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2a, 0x44, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x5c, 0x47, 0x63, 0x70, 0x5c, 0x4f, 0x73, 0x6d, 0x5c, 0x56, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x22, 0x44, 0x61, 0x74, 0x61, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x3a, 0x3a,
	0x47, 0x63, 0x70, 0x3a, 0x3a, 0x4f, 0x73, 0x6d, 0x3a, 0x3a, 0x56, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescOnce sync.Once
	file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescData = file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDesc
)

func file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescGZIP() []byte {
	file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescOnce.Do(func() {
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescData)
	})
	return file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDescData
}

var file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_goTypes = []interface{}{
	(*CheckHealthRequest)(nil),                                    // 0: datacanvas.gcp.osm.vcluster.v1.CheckHealthRequest
	(*CheckHealthResponse)(nil),                                   // 1: datacanvas.gcp.osm.vcluster.v1.CheckHealthResponse
	(*VersionInformationRequest)(nil),                             // 2: datacanvas.gcp.osm.vcluster.v1.VersionInformationRequest
	(*VersionInformationResponse)(nil),                            // 3: datacanvas.gcp.osm.vcluster.v1.VersionInformationResponse
	(*CreateVClusterRequest)(nil),                                 // 4: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest
	(*CreateVClusterResponse)(nil),                                // 5: datacanvas.gcp.osm.vcluster.v1.CreateVClusterResponse
	(*DeleteVClusterRequest)(nil),                                 // 6: datacanvas.gcp.osm.vcluster.v1.DeleteVClusterRequest
	(*DeleteVClusterResponse)(nil),                                // 7: datacanvas.gcp.osm.vcluster.v1.DeleteVClusterResponse
	(*GetKubeConfigRequest)(nil),                                  // 8: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigRequest
	(*GetKubeConfigResponse)(nil),                                 // 9: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse
	(*GetKubeConfigBase64Response)(nil),                           // 10: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigBase64Response
	(*PauseVClusterRequest)(nil),                                  // 11: datacanvas.gcp.osm.vcluster.v1.PauseVClusterRequest
	(*PauseVClusterResponse)(nil),                                 // 12: datacanvas.gcp.osm.vcluster.v1.PauseVClusterResponse
	(*QueryOperateStatusRequest)(nil),                             // 13: datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusRequest
	(*QueryOperateStatusResponse)(nil),                            // 14: datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusResponse
	(*ResumeVClusterRequest)(nil),                                 // 15: datacanvas.gcp.osm.vcluster.v1.ResumeVClusterRequest
	(*ResumeVClusterResponse)(nil),                                // 16: datacanvas.gcp.osm.vcluster.v1.ResumeVClusterResponse
	(*UpdateVClusterRequest)(nil),                                 // 17: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest
	(*UpdateVClusterResponse)(nil),                                // 18: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterResponse
	(*GetVClusterStatusRequest)(nil),                              // 19: datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusRequest
	(*GetVClusterStatusResponse)(nil),                             // 20: datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusResponse
	(*GetVClusterResourceDetailsRequest)(nil),                     // 21: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsRequest
	(*GetVClusterResourceDetailsResponse)(nil),                    // 22: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse
	(*GetVClusterContainerIDRequest)(nil),                         // 23: datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDRequest
	(*GetVClusterContainerIDResponse)(nil),                        // 24: datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDResponse
	(*VersionInformationResponse_Info)(nil),                       // 25: datacanvas.gcp.osm.vcluster.v1.VersionInformationResponse.Info
	(*CreateVClusterRequest_Orderlist)(nil),                       // 26: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist
	(*CreateVClusterRequest_CustomHelmConfig)(nil),                // 27: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.CustomHelmConfig
	(*CreateVClusterRequest_Orderlist_OrderInfo)(nil),             // 28: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist.OrderInfo
	(*CreateVClusterRequest_Orderlist_InstanceSpec)(nil),          // 29: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist.InstanceSpec
	(*CreateVClusterResponse_Data)(nil),                           // 30: datacanvas.gcp.osm.vcluster.v1.CreateVClusterResponse.Data
	(*DeleteVClusterResponse_Data)(nil),                           // 31: datacanvas.gcp.osm.vcluster.v1.DeleteVClusterResponse.Data
	(*GetKubeConfigResponse_KubeConfig)(nil),                      // 32: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig
	(*GetKubeConfigResponse_KubeConfig_NamedCluster)(nil),         // 33: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedCluster
	(*GetKubeConfigResponse_KubeConfig_NamedContext)(nil),         // 34: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedContext
	(*GetKubeConfigResponse_KubeConfig_Preferences)(nil),          // 35: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.Preferences
	(*GetKubeConfigResponse_KubeConfig_NamedUser)(nil),            // 36: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedUser
	(*GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster)(nil), // 37: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedCluster.Cluster
	(*GetKubeConfigResponse_KubeConfig_NamedContext_Context)(nil), // 38: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedContext.Context
	(*GetKubeConfigResponse_KubeConfig_NamedUser_User)(nil),       // 39: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedUser.User
	(*PauseVClusterResponse_Data)(nil),                            // 40: datacanvas.gcp.osm.vcluster.v1.PauseVClusterResponse.Data
	(*QueryOperateStatusResponse_Data)(nil),                       // 41: datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusResponse.Data
	(*ResumeVClusterResponse_Data)(nil),                           // 42: datacanvas.gcp.osm.vcluster.v1.ResumeVClusterResponse.Data
	(*UpdateVClusterRequest_Orderlist)(nil),                       // 43: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist
	(*UpdateVClusterRequest_CustomHelmConfig)(nil),                // 44: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.CustomHelmConfig
	(*UpdateVClusterRequest_Orderlist_OrderInfo)(nil),             // 45: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist.OrderInfo
	(*UpdateVClusterRequest_Orderlist_InstanceSpec)(nil),          // 46: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist.InstanceSpec
	(*UpdateVClusterResponse_Data)(nil),                           // 47: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterResponse.Data
	(*GetVClusterStatusResponse_Data)(nil),                        // 48: datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusResponse.Data
	(*GetVClusterResourceDetailsResponse_Data)(nil),               // 49: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Data
	(*GetVClusterResourceDetailsResponse_Resourcequotas)(nil),     // 50: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas
	nil, // 51: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Data.ConfigurationsEntry
	(*GetVClusterResourceDetailsResponse_Resourcequotas_Quota)(nil), // 52: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.Quota
	nil, // 53: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.MemoryEntry
	nil, // 54: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.CpuEntry
	(*GetVClusterContainerIDResponse_Data)(nil), // 55: datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDResponse.Data
}
var file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_depIdxs = []int32{
	25, // 0: datacanvas.gcp.osm.vcluster.v1.VersionInformationResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.VersionInformationResponse.Info
	26, // 1: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.orderlist:type_name -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist
	27, // 2: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.custom_helm_config:type_name -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.CustomHelmConfig
	30, // 3: datacanvas.gcp.osm.vcluster.v1.CreateVClusterResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterResponse.Data
	31, // 4: datacanvas.gcp.osm.vcluster.v1.DeleteVClusterResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.DeleteVClusterResponse.Data
	32, // 5: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig
	40, // 6: datacanvas.gcp.osm.vcluster.v1.PauseVClusterResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.PauseVClusterResponse.Data
	41, // 7: datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusResponse.Data
	42, // 8: datacanvas.gcp.osm.vcluster.v1.ResumeVClusterResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.ResumeVClusterResponse.Data
	43, // 9: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.orderlist:type_name -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist
	44, // 10: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.custom_helm_config:type_name -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.CustomHelmConfig
	47, // 11: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterResponse.Data
	48, // 12: datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusResponse.Data
	49, // 13: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Data
	55, // 14: datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDResponse.data:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDResponse.Data
	28, // 15: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist.order_info:type_name -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist.OrderInfo
	29, // 16: datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist.instance_spec:type_name -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest.Orderlist.InstanceSpec
	33, // 17: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.clusters:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedCluster
	34, // 18: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.contexts:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedContext
	35, // 19: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.preferences:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.Preferences
	36, // 20: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.users:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedUser
	37, // 21: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedCluster.cluster:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedCluster.Cluster
	38, // 22: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedContext.context:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedContext.Context
	39, // 23: datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedUser.user:type_name -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse.KubeConfig.NamedUser.User
	45, // 24: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist.order_info:type_name -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist.OrderInfo
	46, // 25: datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist.instance_spec:type_name -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest.Orderlist.InstanceSpec
	50, // 26: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Data.utilization_rate:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas
	51, // 27: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Data.configurations:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Data.ConfigurationsEntry
	52, // 28: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.gpu:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.Quota
	53, // 29: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.memory:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.MemoryEntry
	54, // 30: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.cpu:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.CpuEntry
	52, // 31: datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.storage:type_name -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse.Resourcequotas.Quota
	0,  // 32: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CheckHealth:input_type -> datacanvas.gcp.osm.vcluster.v1.CheckHealthRequest
	2,  // 33: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.VersionInformation:input_type -> datacanvas.gcp.osm.vcluster.v1.VersionInformationRequest
	4,  // 34: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CreateVCluster:input_type -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterRequest
	17, // 35: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.UpdateVCluster:input_type -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterRequest
	6,  // 36: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.DeleteVCluster:input_type -> datacanvas.gcp.osm.vcluster.v1.DeleteVClusterRequest
	8,  // 37: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfig:input_type -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigRequest
	8,  // 38: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfigBase64:input_type -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigRequest
	11, // 39: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.PauseVCluster:input_type -> datacanvas.gcp.osm.vcluster.v1.PauseVClusterRequest
	13, // 40: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.QueryOperateStatus:input_type -> datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusRequest
	15, // 41: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.ResumeVCluster:input_type -> datacanvas.gcp.osm.vcluster.v1.ResumeVClusterRequest
	19, // 42: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterStatus:input_type -> datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusRequest
	21, // 43: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterResourceDetails:input_type -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsRequest
	23, // 44: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterContainerID:input_type -> datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDRequest
	1,  // 45: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CheckHealth:output_type -> datacanvas.gcp.osm.vcluster.v1.CheckHealthResponse
	3,  // 46: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.VersionInformation:output_type -> datacanvas.gcp.osm.vcluster.v1.VersionInformationResponse
	5,  // 47: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CreateVCluster:output_type -> datacanvas.gcp.osm.vcluster.v1.CreateVClusterResponse
	18, // 48: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.UpdateVCluster:output_type -> datacanvas.gcp.osm.vcluster.v1.UpdateVClusterResponse
	7,  // 49: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.DeleteVCluster:output_type -> datacanvas.gcp.osm.vcluster.v1.DeleteVClusterResponse
	9,  // 50: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfig:output_type -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigResponse
	10, // 51: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfigBase64:output_type -> datacanvas.gcp.osm.vcluster.v1.GetKubeConfigBase64Response
	12, // 52: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.PauseVCluster:output_type -> datacanvas.gcp.osm.vcluster.v1.PauseVClusterResponse
	14, // 53: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.QueryOperateStatus:output_type -> datacanvas.gcp.osm.vcluster.v1.QueryOperateStatusResponse
	16, // 54: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.ResumeVCluster:output_type -> datacanvas.gcp.osm.vcluster.v1.ResumeVClusterResponse
	20, // 55: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterStatus:output_type -> datacanvas.gcp.osm.vcluster.v1.GetVClusterStatusResponse
	22, // 56: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterResourceDetails:output_type -> datacanvas.gcp.osm.vcluster.v1.GetVClusterResourceDetailsResponse
	24, // 57: datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterContainerID:output_type -> datacanvas.gcp.osm.vcluster.v1.GetVClusterContainerIDResponse
	45, // [45:58] is the sub-list for method output_type
	32, // [32:45] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_init() }
func file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_init() {
	if File_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigBase64Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseVClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseVClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeVClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeVClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterResourceDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterResourceDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterContainerIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterContainerIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInformationResponse_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterRequest_Orderlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterRequest_CustomHelmConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterRequest_Orderlist_OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterRequest_Orderlist_InstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVClusterResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVClusterResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_NamedCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_NamedContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_Preferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_NamedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_NamedCluster_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_NamedContext_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigResponse_KubeConfig_NamedUser_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseVClusterResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateStatusResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeVClusterResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterRequest_Orderlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterRequest_CustomHelmConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterRequest_Orderlist_OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterRequest_Orderlist_InstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVClusterResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterStatusResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterResourceDetailsResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterResourceDetailsResponse_Resourcequotas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterResourceDetailsResponse_Resourcequotas_Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVClusterContainerIDResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_goTypes,
		DependencyIndexes: file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_depIdxs,
		MessageInfos:      file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_msgTypes,
	}.Build()
	File_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto = out.File
	file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_rawDesc = nil
	file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_goTypes = nil
	file_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto_depIdxs = nil
}
