// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: datacanvas/gcp/osm/vcluster_1.1/v1/vcluster.proto

package vclusterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "vcluster-gateway/pkg/apis/grpc/gen/datacanvas/gcp/osm/vcluster_1.1/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VClusterGatewayServiceName is the fully-qualified name of the VClusterGatewayService service.
	VClusterGatewayServiceName = "datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VClusterGatewayServiceCheckHealthProcedure is the fully-qualified name of the
	// VClusterGatewayService's CheckHealth RPC.
	VClusterGatewayServiceCheckHealthProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/CheckHealth"
	// VClusterGatewayServiceVersionInformationProcedure is the fully-qualified name of the
	// VClusterGatewayService's VersionInformation RPC.
	VClusterGatewayServiceVersionInformationProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/VersionInformation"
	// VClusterGatewayServiceCreateVClusterProcedure is the fully-qualified name of the
	// VClusterGatewayService's CreateVCluster RPC.
	VClusterGatewayServiceCreateVClusterProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/CreateVCluster"
	// VClusterGatewayServiceUpdateVClusterProcedure is the fully-qualified name of the
	// VClusterGatewayService's UpdateVCluster RPC.
	VClusterGatewayServiceUpdateVClusterProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/UpdateVCluster"
	// VClusterGatewayServiceDeleteVClusterProcedure is the fully-qualified name of the
	// VClusterGatewayService's DeleteVCluster RPC.
	VClusterGatewayServiceDeleteVClusterProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/DeleteVCluster"
	// VClusterGatewayServiceGetKubeConfigProcedure is the fully-qualified name of the
	// VClusterGatewayService's GetKubeConfig RPC.
	VClusterGatewayServiceGetKubeConfigProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/GetKubeConfig"
	// VClusterGatewayServiceGetKubeConfigBase64Procedure is the fully-qualified name of the
	// VClusterGatewayService's GetKubeConfigBase64 RPC.
	VClusterGatewayServiceGetKubeConfigBase64Procedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/GetKubeConfigBase64"
	// VClusterGatewayServicePauseVClusterProcedure is the fully-qualified name of the
	// VClusterGatewayService's PauseVCluster RPC.
	VClusterGatewayServicePauseVClusterProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/PauseVCluster"
	// VClusterGatewayServiceQueryOperateStatusProcedure is the fully-qualified name of the
	// VClusterGatewayService's QueryOperateStatus RPC.
	VClusterGatewayServiceQueryOperateStatusProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/QueryOperateStatus"
	// VClusterGatewayServiceResumeVClusterProcedure is the fully-qualified name of the
	// VClusterGatewayService's ResumeVCluster RPC.
	VClusterGatewayServiceResumeVClusterProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/ResumeVCluster"
	// VClusterGatewayServiceGetVClusterStatusProcedure is the fully-qualified name of the
	// VClusterGatewayService's GetVClusterStatus RPC.
	VClusterGatewayServiceGetVClusterStatusProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/GetVClusterStatus"
	// VClusterGatewayServiceGetVClusterResourceDetailsProcedure is the fully-qualified name of the
	// VClusterGatewayService's GetVClusterResourceDetails RPC.
	VClusterGatewayServiceGetVClusterResourceDetailsProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/GetVClusterResourceDetails"
	// VClusterGatewayServiceGetVClusterContainerIDProcedure is the fully-qualified name of the
	// VClusterGatewayService's GetVClusterContainerID RPC.
	VClusterGatewayServiceGetVClusterContainerIDProcedure = "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/GetVClusterContainerID"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	vClusterGatewayServiceServiceDescriptor                          = v1.File_datacanvas_gcp_osm_vcluster_1_1_v1_vcluster_proto.Services().ByName("VClusterGatewayService")
	vClusterGatewayServiceCheckHealthMethodDescriptor                = vClusterGatewayServiceServiceDescriptor.Methods().ByName("CheckHealth")
	vClusterGatewayServiceVersionInformationMethodDescriptor         = vClusterGatewayServiceServiceDescriptor.Methods().ByName("VersionInformation")
	vClusterGatewayServiceCreateVClusterMethodDescriptor             = vClusterGatewayServiceServiceDescriptor.Methods().ByName("CreateVCluster")
	vClusterGatewayServiceUpdateVClusterMethodDescriptor             = vClusterGatewayServiceServiceDescriptor.Methods().ByName("UpdateVCluster")
	vClusterGatewayServiceDeleteVClusterMethodDescriptor             = vClusterGatewayServiceServiceDescriptor.Methods().ByName("DeleteVCluster")
	vClusterGatewayServiceGetKubeConfigMethodDescriptor              = vClusterGatewayServiceServiceDescriptor.Methods().ByName("GetKubeConfig")
	vClusterGatewayServiceGetKubeConfigBase64MethodDescriptor        = vClusterGatewayServiceServiceDescriptor.Methods().ByName("GetKubeConfigBase64")
	vClusterGatewayServicePauseVClusterMethodDescriptor              = vClusterGatewayServiceServiceDescriptor.Methods().ByName("PauseVCluster")
	vClusterGatewayServiceQueryOperateStatusMethodDescriptor         = vClusterGatewayServiceServiceDescriptor.Methods().ByName("QueryOperateStatus")
	vClusterGatewayServiceResumeVClusterMethodDescriptor             = vClusterGatewayServiceServiceDescriptor.Methods().ByName("ResumeVCluster")
	vClusterGatewayServiceGetVClusterStatusMethodDescriptor          = vClusterGatewayServiceServiceDescriptor.Methods().ByName("GetVClusterStatus")
	vClusterGatewayServiceGetVClusterResourceDetailsMethodDescriptor = vClusterGatewayServiceServiceDescriptor.Methods().ByName("GetVClusterResourceDetails")
	vClusterGatewayServiceGetVClusterContainerIDMethodDescriptor     = vClusterGatewayServiceServiceDescriptor.Methods().ByName("GetVClusterContainerID")
)

// VClusterGatewayServiceClient is a client for the
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService service.
type VClusterGatewayServiceClient interface {
	// 检查服务健康状态
	CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error)
	// 版本信息
	VersionInformation(context.Context, *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error)
	// 创建 vCluster
	CreateVCluster(context.Context, *connect.Request[v1.CreateVClusterRequest]) (*connect.Response[v1.CreateVClusterResponse], error)
	// 更新 vCluster
	UpdateVCluster(context.Context, *connect.Request[v1.UpdateVClusterRequest]) (*connect.Response[v1.UpdateVClusterResponse], error)
	// 删除 vCluster
	DeleteVCluster(context.Context, *connect.Request[v1.DeleteVClusterRequest]) (*connect.Response[v1.DeleteVClusterResponse], error)
	// 获取 vCluster KubeConfig
	GetKubeConfig(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error)
	// 获取 vCluster KubeConfig, 返回值 base64 编码
	GetKubeConfigBase64(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigBase64Response], error)
	// 暂停 vCluster
	PauseVCluster(context.Context, *connect.Request[v1.PauseVClusterRequest]) (*connect.Response[v1.PauseVClusterResponse], error)
	// 查询操作 vCluster 集群操作的状态
	// 例如 type=create, 返回的 status 为 success 即为成功
	QueryOperateStatus(context.Context, *connect.Request[v1.QueryOperateStatusRequest]) (*connect.Response[v1.QueryOperateStatusResponse], error)
	// 恢复 vCluster
	ResumeVCluster(context.Context, *connect.Request[v1.ResumeVClusterRequest]) (*connect.Response[v1.ResumeVClusterResponse], error)
	// 获取 vCluster 集群状态
	GetVClusterStatus(context.Context, *connect.Request[v1.GetVClusterStatusRequest]) (*connect.Response[v1.GetVClusterStatusResponse], error)
	// 获取 vCluster 集群资源配额
	GetVClusterResourceDetails(context.Context, *connect.Request[v1.GetVClusterResourceDetailsRequest]) (*connect.Response[v1.GetVClusterResourceDetailsResponse], error)
	// 获取指定 vCluster 的容器 ID
	GetVClusterContainerID(context.Context, *connect.Request[v1.GetVClusterContainerIDRequest]) (*connect.Response[v1.GetVClusterContainerIDResponse], error)
}

// NewVClusterGatewayServiceClient constructs a client for the
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVClusterGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VClusterGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vClusterGatewayServiceClient{
		checkHealth: connect.NewClient[v1.CheckHealthRequest, v1.CheckHealthResponse](
			httpClient,
			baseURL+VClusterGatewayServiceCheckHealthProcedure,
			connect.WithSchema(vClusterGatewayServiceCheckHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		versionInformation: connect.NewClient[v1.VersionInformationRequest, v1.VersionInformationResponse](
			httpClient,
			baseURL+VClusterGatewayServiceVersionInformationProcedure,
			connect.WithSchema(vClusterGatewayServiceVersionInformationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createVCluster: connect.NewClient[v1.CreateVClusterRequest, v1.CreateVClusterResponse](
			httpClient,
			baseURL+VClusterGatewayServiceCreateVClusterProcedure,
			connect.WithSchema(vClusterGatewayServiceCreateVClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateVCluster: connect.NewClient[v1.UpdateVClusterRequest, v1.UpdateVClusterResponse](
			httpClient,
			baseURL+VClusterGatewayServiceUpdateVClusterProcedure,
			connect.WithSchema(vClusterGatewayServiceUpdateVClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteVCluster: connect.NewClient[v1.DeleteVClusterRequest, v1.DeleteVClusterResponse](
			httpClient,
			baseURL+VClusterGatewayServiceDeleteVClusterProcedure,
			connect.WithSchema(vClusterGatewayServiceDeleteVClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKubeConfig: connect.NewClient[v1.GetKubeConfigRequest, v1.GetKubeConfigResponse](
			httpClient,
			baseURL+VClusterGatewayServiceGetKubeConfigProcedure,
			connect.WithSchema(vClusterGatewayServiceGetKubeConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKubeConfigBase64: connect.NewClient[v1.GetKubeConfigRequest, v1.GetKubeConfigBase64Response](
			httpClient,
			baseURL+VClusterGatewayServiceGetKubeConfigBase64Procedure,
			connect.WithSchema(vClusterGatewayServiceGetKubeConfigBase64MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseVCluster: connect.NewClient[v1.PauseVClusterRequest, v1.PauseVClusterResponse](
			httpClient,
			baseURL+VClusterGatewayServicePauseVClusterProcedure,
			connect.WithSchema(vClusterGatewayServicePauseVClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryOperateStatus: connect.NewClient[v1.QueryOperateStatusRequest, v1.QueryOperateStatusResponse](
			httpClient,
			baseURL+VClusterGatewayServiceQueryOperateStatusProcedure,
			connect.WithSchema(vClusterGatewayServiceQueryOperateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resumeVCluster: connect.NewClient[v1.ResumeVClusterRequest, v1.ResumeVClusterResponse](
			httpClient,
			baseURL+VClusterGatewayServiceResumeVClusterProcedure,
			connect.WithSchema(vClusterGatewayServiceResumeVClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVClusterStatus: connect.NewClient[v1.GetVClusterStatusRequest, v1.GetVClusterStatusResponse](
			httpClient,
			baseURL+VClusterGatewayServiceGetVClusterStatusProcedure,
			connect.WithSchema(vClusterGatewayServiceGetVClusterStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVClusterResourceDetails: connect.NewClient[v1.GetVClusterResourceDetailsRequest, v1.GetVClusterResourceDetailsResponse](
			httpClient,
			baseURL+VClusterGatewayServiceGetVClusterResourceDetailsProcedure,
			connect.WithSchema(vClusterGatewayServiceGetVClusterResourceDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVClusterContainerID: connect.NewClient[v1.GetVClusterContainerIDRequest, v1.GetVClusterContainerIDResponse](
			httpClient,
			baseURL+VClusterGatewayServiceGetVClusterContainerIDProcedure,
			connect.WithSchema(vClusterGatewayServiceGetVClusterContainerIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// vClusterGatewayServiceClient implements VClusterGatewayServiceClient.
type vClusterGatewayServiceClient struct {
	checkHealth                *connect.Client[v1.CheckHealthRequest, v1.CheckHealthResponse]
	versionInformation         *connect.Client[v1.VersionInformationRequest, v1.VersionInformationResponse]
	createVCluster             *connect.Client[v1.CreateVClusterRequest, v1.CreateVClusterResponse]
	updateVCluster             *connect.Client[v1.UpdateVClusterRequest, v1.UpdateVClusterResponse]
	deleteVCluster             *connect.Client[v1.DeleteVClusterRequest, v1.DeleteVClusterResponse]
	getKubeConfig              *connect.Client[v1.GetKubeConfigRequest, v1.GetKubeConfigResponse]
	getKubeConfigBase64        *connect.Client[v1.GetKubeConfigRequest, v1.GetKubeConfigBase64Response]
	pauseVCluster              *connect.Client[v1.PauseVClusterRequest, v1.PauseVClusterResponse]
	queryOperateStatus         *connect.Client[v1.QueryOperateStatusRequest, v1.QueryOperateStatusResponse]
	resumeVCluster             *connect.Client[v1.ResumeVClusterRequest, v1.ResumeVClusterResponse]
	getVClusterStatus          *connect.Client[v1.GetVClusterStatusRequest, v1.GetVClusterStatusResponse]
	getVClusterResourceDetails *connect.Client[v1.GetVClusterResourceDetailsRequest, v1.GetVClusterResourceDetailsResponse]
	getVClusterContainerID     *connect.Client[v1.GetVClusterContainerIDRequest, v1.GetVClusterContainerIDResponse]
}

// CheckHealth calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CheckHealth.
func (c *vClusterGatewayServiceClient) CheckHealth(ctx context.Context, req *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error) {
	return c.checkHealth.CallUnary(ctx, req)
}

// VersionInformation calls
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.VersionInformation.
func (c *vClusterGatewayServiceClient) VersionInformation(ctx context.Context, req *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error) {
	return c.versionInformation.CallUnary(ctx, req)
}

// CreateVCluster calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CreateVCluster.
func (c *vClusterGatewayServiceClient) CreateVCluster(ctx context.Context, req *connect.Request[v1.CreateVClusterRequest]) (*connect.Response[v1.CreateVClusterResponse], error) {
	return c.createVCluster.CallUnary(ctx, req)
}

// UpdateVCluster calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.UpdateVCluster.
func (c *vClusterGatewayServiceClient) UpdateVCluster(ctx context.Context, req *connect.Request[v1.UpdateVClusterRequest]) (*connect.Response[v1.UpdateVClusterResponse], error) {
	return c.updateVCluster.CallUnary(ctx, req)
}

// DeleteVCluster calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.DeleteVCluster.
func (c *vClusterGatewayServiceClient) DeleteVCluster(ctx context.Context, req *connect.Request[v1.DeleteVClusterRequest]) (*connect.Response[v1.DeleteVClusterResponse], error) {
	return c.deleteVCluster.CallUnary(ctx, req)
}

// GetKubeConfig calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfig.
func (c *vClusterGatewayServiceClient) GetKubeConfig(ctx context.Context, req *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error) {
	return c.getKubeConfig.CallUnary(ctx, req)
}

// GetKubeConfigBase64 calls
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfigBase64.
func (c *vClusterGatewayServiceClient) GetKubeConfigBase64(ctx context.Context, req *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigBase64Response], error) {
	return c.getKubeConfigBase64.CallUnary(ctx, req)
}

// PauseVCluster calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.PauseVCluster.
func (c *vClusterGatewayServiceClient) PauseVCluster(ctx context.Context, req *connect.Request[v1.PauseVClusterRequest]) (*connect.Response[v1.PauseVClusterResponse], error) {
	return c.pauseVCluster.CallUnary(ctx, req)
}

// QueryOperateStatus calls
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.QueryOperateStatus.
func (c *vClusterGatewayServiceClient) QueryOperateStatus(ctx context.Context, req *connect.Request[v1.QueryOperateStatusRequest]) (*connect.Response[v1.QueryOperateStatusResponse], error) {
	return c.queryOperateStatus.CallUnary(ctx, req)
}

// ResumeVCluster calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.ResumeVCluster.
func (c *vClusterGatewayServiceClient) ResumeVCluster(ctx context.Context, req *connect.Request[v1.ResumeVClusterRequest]) (*connect.Response[v1.ResumeVClusterResponse], error) {
	return c.resumeVCluster.CallUnary(ctx, req)
}

// GetVClusterStatus calls datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterStatus.
func (c *vClusterGatewayServiceClient) GetVClusterStatus(ctx context.Context, req *connect.Request[v1.GetVClusterStatusRequest]) (*connect.Response[v1.GetVClusterStatusResponse], error) {
	return c.getVClusterStatus.CallUnary(ctx, req)
}

// GetVClusterResourceDetails calls
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterResourceDetails.
func (c *vClusterGatewayServiceClient) GetVClusterResourceDetails(ctx context.Context, req *connect.Request[v1.GetVClusterResourceDetailsRequest]) (*connect.Response[v1.GetVClusterResourceDetailsResponse], error) {
	return c.getVClusterResourceDetails.CallUnary(ctx, req)
}

// GetVClusterContainerID calls
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterContainerID.
func (c *vClusterGatewayServiceClient) GetVClusterContainerID(ctx context.Context, req *connect.Request[v1.GetVClusterContainerIDRequest]) (*connect.Response[v1.GetVClusterContainerIDResponse], error) {
	return c.getVClusterContainerID.CallUnary(ctx, req)
}

// VClusterGatewayServiceHandler is an implementation of the
// datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService service.
type VClusterGatewayServiceHandler interface {
	// 检查服务健康状态
	CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error)
	// 版本信息
	VersionInformation(context.Context, *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error)
	// 创建 vCluster
	CreateVCluster(context.Context, *connect.Request[v1.CreateVClusterRequest]) (*connect.Response[v1.CreateVClusterResponse], error)
	// 更新 vCluster
	UpdateVCluster(context.Context, *connect.Request[v1.UpdateVClusterRequest]) (*connect.Response[v1.UpdateVClusterResponse], error)
	// 删除 vCluster
	DeleteVCluster(context.Context, *connect.Request[v1.DeleteVClusterRequest]) (*connect.Response[v1.DeleteVClusterResponse], error)
	// 获取 vCluster KubeConfig
	GetKubeConfig(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error)
	// 获取 vCluster KubeConfig, 返回值 base64 编码
	GetKubeConfigBase64(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigBase64Response], error)
	// 暂停 vCluster
	PauseVCluster(context.Context, *connect.Request[v1.PauseVClusterRequest]) (*connect.Response[v1.PauseVClusterResponse], error)
	// 查询操作 vCluster 集群操作的状态
	// 例如 type=create, 返回的 status 为 success 即为成功
	QueryOperateStatus(context.Context, *connect.Request[v1.QueryOperateStatusRequest]) (*connect.Response[v1.QueryOperateStatusResponse], error)
	// 恢复 vCluster
	ResumeVCluster(context.Context, *connect.Request[v1.ResumeVClusterRequest]) (*connect.Response[v1.ResumeVClusterResponse], error)
	// 获取 vCluster 集群状态
	GetVClusterStatus(context.Context, *connect.Request[v1.GetVClusterStatusRequest]) (*connect.Response[v1.GetVClusterStatusResponse], error)
	// 获取 vCluster 集群资源配额
	GetVClusterResourceDetails(context.Context, *connect.Request[v1.GetVClusterResourceDetailsRequest]) (*connect.Response[v1.GetVClusterResourceDetailsResponse], error)
	// 获取指定 vCluster 的容器 ID
	GetVClusterContainerID(context.Context, *connect.Request[v1.GetVClusterContainerIDRequest]) (*connect.Response[v1.GetVClusterContainerIDResponse], error)
}

// NewVClusterGatewayServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVClusterGatewayServiceHandler(svc VClusterGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vClusterGatewayServiceCheckHealthHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceCheckHealthProcedure,
		svc.CheckHealth,
		connect.WithSchema(vClusterGatewayServiceCheckHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceVersionInformationHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceVersionInformationProcedure,
		svc.VersionInformation,
		connect.WithSchema(vClusterGatewayServiceVersionInformationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceCreateVClusterHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceCreateVClusterProcedure,
		svc.CreateVCluster,
		connect.WithSchema(vClusterGatewayServiceCreateVClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceUpdateVClusterHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceUpdateVClusterProcedure,
		svc.UpdateVCluster,
		connect.WithSchema(vClusterGatewayServiceUpdateVClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceDeleteVClusterHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceDeleteVClusterProcedure,
		svc.DeleteVCluster,
		connect.WithSchema(vClusterGatewayServiceDeleteVClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceGetKubeConfigHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceGetKubeConfigProcedure,
		svc.GetKubeConfig,
		connect.WithSchema(vClusterGatewayServiceGetKubeConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceGetKubeConfigBase64Handler := connect.NewUnaryHandler(
		VClusterGatewayServiceGetKubeConfigBase64Procedure,
		svc.GetKubeConfigBase64,
		connect.WithSchema(vClusterGatewayServiceGetKubeConfigBase64MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServicePauseVClusterHandler := connect.NewUnaryHandler(
		VClusterGatewayServicePauseVClusterProcedure,
		svc.PauseVCluster,
		connect.WithSchema(vClusterGatewayServicePauseVClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceQueryOperateStatusHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceQueryOperateStatusProcedure,
		svc.QueryOperateStatus,
		connect.WithSchema(vClusterGatewayServiceQueryOperateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceResumeVClusterHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceResumeVClusterProcedure,
		svc.ResumeVCluster,
		connect.WithSchema(vClusterGatewayServiceResumeVClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceGetVClusterStatusHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceGetVClusterStatusProcedure,
		svc.GetVClusterStatus,
		connect.WithSchema(vClusterGatewayServiceGetVClusterStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceGetVClusterResourceDetailsHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceGetVClusterResourceDetailsProcedure,
		svc.GetVClusterResourceDetails,
		connect.WithSchema(vClusterGatewayServiceGetVClusterResourceDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vClusterGatewayServiceGetVClusterContainerIDHandler := connect.NewUnaryHandler(
		VClusterGatewayServiceGetVClusterContainerIDProcedure,
		svc.GetVClusterContainerID,
		connect.WithSchema(vClusterGatewayServiceGetVClusterContainerIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VClusterGatewayServiceCheckHealthProcedure:
			vClusterGatewayServiceCheckHealthHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceVersionInformationProcedure:
			vClusterGatewayServiceVersionInformationHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceCreateVClusterProcedure:
			vClusterGatewayServiceCreateVClusterHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceUpdateVClusterProcedure:
			vClusterGatewayServiceUpdateVClusterHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceDeleteVClusterProcedure:
			vClusterGatewayServiceDeleteVClusterHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceGetKubeConfigProcedure:
			vClusterGatewayServiceGetKubeConfigHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceGetKubeConfigBase64Procedure:
			vClusterGatewayServiceGetKubeConfigBase64Handler.ServeHTTP(w, r)
		case VClusterGatewayServicePauseVClusterProcedure:
			vClusterGatewayServicePauseVClusterHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceQueryOperateStatusProcedure:
			vClusterGatewayServiceQueryOperateStatusHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceResumeVClusterProcedure:
			vClusterGatewayServiceResumeVClusterHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceGetVClusterStatusProcedure:
			vClusterGatewayServiceGetVClusterStatusHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceGetVClusterResourceDetailsProcedure:
			vClusterGatewayServiceGetVClusterResourceDetailsHandler.ServeHTTP(w, r)
		case VClusterGatewayServiceGetVClusterContainerIDProcedure:
			vClusterGatewayServiceGetVClusterContainerIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVClusterGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVClusterGatewayServiceHandler struct{}

func (UnimplementedVClusterGatewayServiceHandler) CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CheckHealth is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) VersionInformation(context.Context, *connect.Request[v1.VersionInformationRequest]) (*connect.Response[v1.VersionInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.VersionInformation is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) CreateVCluster(context.Context, *connect.Request[v1.CreateVClusterRequest]) (*connect.Response[v1.CreateVClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.CreateVCluster is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) UpdateVCluster(context.Context, *connect.Request[v1.UpdateVClusterRequest]) (*connect.Response[v1.UpdateVClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.UpdateVCluster is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) DeleteVCluster(context.Context, *connect.Request[v1.DeleteVClusterRequest]) (*connect.Response[v1.DeleteVClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.DeleteVCluster is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) GetKubeConfig(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfig is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) GetKubeConfigBase64(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigBase64Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetKubeConfigBase64 is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) PauseVCluster(context.Context, *connect.Request[v1.PauseVClusterRequest]) (*connect.Response[v1.PauseVClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.PauseVCluster is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) QueryOperateStatus(context.Context, *connect.Request[v1.QueryOperateStatusRequest]) (*connect.Response[v1.QueryOperateStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.QueryOperateStatus is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) ResumeVCluster(context.Context, *connect.Request[v1.ResumeVClusterRequest]) (*connect.Response[v1.ResumeVClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.ResumeVCluster is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) GetVClusterStatus(context.Context, *connect.Request[v1.GetVClusterStatusRequest]) (*connect.Response[v1.GetVClusterStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterStatus is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) GetVClusterResourceDetails(context.Context, *connect.Request[v1.GetVClusterResourceDetailsRequest]) (*connect.Response[v1.GetVClusterResourceDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterResourceDetails is not implemented"))
}

func (UnimplementedVClusterGatewayServiceHandler) GetVClusterContainerID(context.Context, *connect.Request[v1.GetVClusterContainerIDRequest]) (*connect.Response[v1.GetVClusterContainerIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datacanvas.gcp.osm.vcluster.v1.VClusterGatewayService.GetVClusterContainerID is not implemented"))
}
